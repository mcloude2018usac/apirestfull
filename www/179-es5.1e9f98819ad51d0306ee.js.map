{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/ion-virtual-scroll.entry.js"],"names":["createNode","el","type","template","getTemplate","ownerDocument","importNode","content","children","querySelector","calcCells","items","itemHeight","headerHeight","footerHeight","headerFn","footerFn","approxHeaderHeight","approxFooterHeight","approxItemHeight","j","offset","len","cells","end","i","item","value","push","index","height","reads","visible","VirtualScroll","hostRef","this","range","length","viewportHeight","virtualDom","isEnabled","viewportOffset","currentScrollTop","indexDirty","lastItemLen","totalHeight","onScroll","updateVirtualScroll","contentEl","closest","getScrollElement","scrollEl","updateState","console","error","Promise","resolve","heightIndex","cell","find","c","getHeightIndex","cellIndex","findIndex","dst","src","Math","max","scheduleUpdate","checkRange","timerUpdate","clearTimeout","readVS","bind","writeVS","topOffset","node","offsetTop","parentElement","offsetHeight","scrollTop","vierportHeight","dirtyIndex","viewport","top","bottom","buffer","topPos","bottomPos","min","currentRange","dom","change","d","toMutate","n","pool","filter","forEach","nodeRender","updateCellHeight","child","Array","from","tagName","childrenNu","newChild","classList","add","appendChild","style","transform","remove","domRender","renderItem","update","window","getComputedStyle","parseFloat","getPropertyValue","setCellHeight","componentOnReady","then","setTimeout","shouldEnable","enableScrollEvents","Infinity","calcHeightIndex","buf","Uint32Array","newBuf","set","subarray","acum","shouldListen","rmEvent","addEventListener","removeEventListener","renderHeader","renderFooter","VirtualProxy","map","renderVirtualNode","g","utils","vattrs","classes","Object","assign","class"],"mappings":"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","file":"x","sourcesContent":["import { r as registerInstance, f as readTask, w as writeTask, i as forceUpdate, h, H as Host, e as getElement } from './index-e23c3ffd.js';\n\nconst CELL_TYPE_ITEM = 'item';\nconst CELL_TYPE_HEADER = 'header';\nconst CELL_TYPE_FOOTER = 'footer';\nconst NODE_CHANGE_NONE = 0;\nconst NODE_CHANGE_POSITION = 1;\nconst NODE_CHANGE_CELL = 2;\n\nconst MIN_READS = 2;\nconst updateVDom = (dom, heightIndex, cells, range) => {\n    // reset dom\n    for (const node of dom) {\n        node.change = NODE_CHANGE_NONE;\n        node.d = true;\n    }\n    // try to match into exisiting dom\n    const toMutate = [];\n    const end = range.offset + range.length;\n    for (let i = range.offset; i < end; i++) {\n        const cell = cells[i];\n        const node = dom.find(n => n.d && n.cell === cell);\n        if (node) {\n            const top = heightIndex[i];\n            if (top !== node.top) {\n                node.top = top;\n                node.change = NODE_CHANGE_POSITION;\n            }\n            node.d = false;\n        }\n        else {\n            toMutate.push(cell);\n        }\n    }\n    // needs to append\n    const pool = dom.filter(n => n.d);\n    for (const cell of toMutate) {\n        const node = pool.find(n => n.d && n.cell.type === cell.type);\n        const index = cell.i;\n        if (node) {\n            node.d = false;\n            node.change = NODE_CHANGE_CELL;\n            node.cell = cell;\n            node.top = heightIndex[index];\n        }\n        else {\n            dom.push({\n                d: false,\n                cell,\n                visible: true,\n                change: NODE_CHANGE_CELL,\n                top: heightIndex[index],\n            });\n        }\n    }\n    dom\n        .filter(n => n.d && n.top !== -9999)\n        .forEach(n => {\n        n.change = NODE_CHANGE_POSITION;\n        n.top = -9999;\n    });\n};\nconst doRender = (el, nodeRender, dom, updateCellHeight) => {\n    const children = Array.from(el.children).filter(n => n.tagName !== 'TEMPLATE');\n    const childrenNu = children.length;\n    let child;\n    for (let i = 0; i < dom.length; i++) {\n        const node = dom[i];\n        const cell = node.cell;\n        // the cell change, the content must be updated\n        if (node.change === NODE_CHANGE_CELL) {\n            if (i < childrenNu) {\n                child = children[i];\n                nodeRender(child, cell, i);\n            }\n            else {\n                const newChild = createNode(el, cell.type);\n                child = nodeRender(newChild, cell, i) || newChild;\n                child.classList.add('virtual-item');\n                el.appendChild(child);\n            }\n            child['$ionCell'] = cell;\n        }\n        else {\n            child = children[i];\n        }\n        // only update position when it changes\n        if (node.change !== NODE_CHANGE_NONE) {\n            child.style.transform = `translate3d(0,${node.top}px,0)`;\n        }\n        // update visibility\n        const visible = cell.visible;\n        if (node.visible !== visible) {\n            if (visible) {\n                child.classList.remove('virtual-loading');\n            }\n            else {\n                child.classList.add('virtual-loading');\n            }\n            node.visible = visible;\n        }\n        // dynamic height\n        if (cell.reads > 0) {\n            updateCellHeight(cell, child);\n            cell.reads--;\n        }\n    }\n};\nconst createNode = (el, type) => {\n    const template = getTemplate(el, type);\n    if (template && el.ownerDocument) {\n        return el.ownerDocument.importNode(template.content, true).children[0];\n    }\n    return null;\n};\nconst getTemplate = (el, type) => {\n    switch (type) {\n        case CELL_TYPE_ITEM: return el.querySelector('template:not([name])');\n        case CELL_TYPE_HEADER: return el.querySelector('template[name=header]');\n        case CELL_TYPE_FOOTER: return el.querySelector('template[name=footer]');\n    }\n};\nconst getViewport = (scrollTop, vierportHeight, margin) => {\n    return {\n        top: Math.max(scrollTop - margin, 0),\n        bottom: scrollTop + vierportHeight + margin\n    };\n};\nconst getRange = (heightIndex, viewport, buffer) => {\n    const topPos = viewport.top;\n    const bottomPos = viewport.bottom;\n    // find top index\n    let i = 0;\n    for (; i < heightIndex.length; i++) {\n        if (heightIndex[i] > topPos) {\n            break;\n        }\n    }\n    const offset = Math.max(i - buffer - 1, 0);\n    // find bottom index\n    for (; i < heightIndex.length; i++) {\n        if (heightIndex[i] >= bottomPos) {\n            break;\n        }\n    }\n    const end = Math.min(i + buffer, heightIndex.length);\n    const length = end - offset;\n    return { offset, length };\n};\nconst getShouldUpdate = (dirtyIndex, currentRange, range) => {\n    const end = range.offset + range.length;\n    return (dirtyIndex <= end ||\n        currentRange.offset !== range.offset ||\n        currentRange.length !== range.length);\n};\nconst findCellIndex = (cells, index) => {\n    const max = cells.length > 0 ? cells[cells.length - 1].index : 0;\n    if (index === 0) {\n        return 0;\n    }\n    else if (index === max + 1) {\n        return cells.length;\n    }\n    else {\n        return cells.findIndex(c => c.index === index);\n    }\n};\nconst inplaceUpdate = (dst, src, offset) => {\n    if (offset === 0 && src.length >= dst.length) {\n        return src;\n    }\n    for (let i = 0; i < src.length; i++) {\n        dst[i + offset] = src[i];\n    }\n    return dst;\n};\nconst calcCells = (items, itemHeight, headerHeight, footerHeight, headerFn, footerFn, approxHeaderHeight, approxFooterHeight, approxItemHeight, j, offset, len) => {\n    const cells = [];\n    const end = len + offset;\n    for (let i = offset; i < end; i++) {\n        const item = items[i];\n        if (headerFn) {\n            const value = headerFn(item, i, items);\n            if (value != null) {\n                cells.push({\n                    i: j++,\n                    type: CELL_TYPE_HEADER,\n                    value,\n                    index: i,\n                    height: headerHeight ? headerHeight(value, i) : approxHeaderHeight,\n                    reads: headerHeight ? 0 : MIN_READS,\n                    visible: !!headerHeight,\n                });\n            }\n        }\n        cells.push({\n            i: j++,\n            type: CELL_TYPE_ITEM,\n            value: item,\n            index: i,\n            height: itemHeight ? itemHeight(item, i) : approxItemHeight,\n            reads: itemHeight ? 0 : MIN_READS,\n            visible: !!itemHeight,\n        });\n        if (footerFn) {\n            const value = footerFn(item, i, items);\n            if (value != null) {\n                cells.push({\n                    i: j++,\n                    type: CELL_TYPE_FOOTER,\n                    value,\n                    index: i,\n                    height: footerHeight ? footerHeight(value, i) : approxFooterHeight,\n                    reads: footerHeight ? 0 : MIN_READS,\n                    visible: !!footerHeight,\n                });\n            }\n        }\n    }\n    return cells;\n};\nconst calcHeightIndex = (buf, cells, index) => {\n    let acum = buf[index];\n    for (let i = index; i < buf.length; i++) {\n        buf[i] = acum;\n        acum += cells[i].height;\n    }\n    return acum;\n};\nconst resizeBuffer = (buf, len) => {\n    if (!buf) {\n        return new Uint32Array(len);\n    }\n    if (buf.length === len) {\n        return buf;\n    }\n    else if (len > buf.length) {\n        const newBuf = new Uint32Array(len);\n        newBuf.set(buf);\n        return newBuf;\n    }\n    else {\n        return buf.subarray(0, len);\n    }\n};\nconst positionForIndex = (index, cells, heightIndex) => {\n    const cell = cells.find(c => c.type === CELL_TYPE_ITEM && c.index === index);\n    if (cell) {\n        return heightIndex[cell.i];\n    }\n    return -1;\n};\n\nconst virtualScrollCss = \"ion-virtual-scroll{display:block;position:relative;width:100%;contain:strict;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}ion-virtual-scroll>.virtual-loading{opacity:0}ion-virtual-scroll>.virtual-item{position:absolute !important;top:0 !important;right:0 !important;left:0 !important;-webkit-transition-duration:0ms;transition-duration:0ms;will-change:transform}\";\n\nconst VirtualScroll = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.range = { offset: 0, length: 0 };\n        this.viewportHeight = 0;\n        this.cells = [];\n        this.virtualDom = [];\n        this.isEnabled = false;\n        this.viewportOffset = 0;\n        this.currentScrollTop = 0;\n        this.indexDirty = 0;\n        this.lastItemLen = 0;\n        this.totalHeight = 0;\n        /**\n         * It is important to provide this\n         * if virtual item height will be significantly larger than the default\n         * The approximate height of each virtual item template's cell.\n         * This dimension is used to help determine how many cells should\n         * be created when initialized, and to help calculate the height of\n         * the scrollable area. This height value can only use `px` units.\n         * Note that the actual rendered size of each cell comes from the\n         * app's CSS, whereas this approximation is used to help calculate\n         * initial dimensions before the item has been rendered.\n         */\n        this.approxItemHeight = 45;\n        /**\n         * The approximate height of each header template's cell.\n         * This dimension is used to help determine how many cells should\n         * be created when initialized, and to help calculate the height of\n         * the scrollable area. This height value can only use `px` units.\n         * Note that the actual rendered size of each cell comes from the\n         * app's CSS, whereas this approximation is used to help calculate\n         * initial dimensions before the item has been rendered.\n         */\n        this.approxHeaderHeight = 30;\n        /**\n         * The approximate width of each footer template's cell.\n         * This dimension is used to help determine how many cells should\n         * be created when initialized, and to help calculate the height of\n         * the scrollable area. This height value can only use `px` units.\n         * Note that the actual rendered size of each cell comes from the\n         * app's CSS, whereas this approximation is used to help calculate\n         * initial dimensions before the item has been rendered.\n         */\n        this.approxFooterHeight = 30;\n        this.onScroll = () => {\n            this.updateVirtualScroll();\n        };\n    }\n    itemsChanged() {\n        this.calcCells();\n        this.updateVirtualScroll();\n    }\n    async connectedCallback() {\n        const contentEl = this.el.closest('ion-content');\n        if (!contentEl) {\n            console.error('<ion-virtual-scroll> must be used inside an <ion-content>');\n            return;\n        }\n        this.scrollEl = await contentEl.getScrollElement();\n        this.contentEl = contentEl;\n        this.calcCells();\n        this.updateState();\n    }\n    componentDidUpdate() {\n        this.updateState();\n    }\n    disconnectedCallback() {\n        this.scrollEl = undefined;\n    }\n    onResize() {\n        this.calcCells();\n        this.updateVirtualScroll();\n    }\n    /**\n     * Returns the position of the virtual item at the given index.\n     */\n    positionForItem(index) {\n        return Promise.resolve(positionForIndex(index, this.cells, this.getHeightIndex()));\n    }\n    /**\n     * This method marks a subset of items as dirty, so they can be re-rendered. Items should be marked as\n     * dirty any time the content or their style changes.\n     *\n     * The subset of items to be updated can are specifing by an offset and a length.\n     */\n    async checkRange(offset, len = -1) {\n        // TODO: kind of hacky how we do in-place updated of the cells\n        // array. this part needs a complete refactor\n        if (!this.items) {\n            return;\n        }\n        const length = (len === -1)\n            ? this.items.length - offset\n            : len;\n        const cellIndex = findCellIndex(this.cells, offset);\n        const cells = calcCells(this.items, this.itemHeight, this.headerHeight, this.footerHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, cellIndex, offset, length);\n        this.cells = inplaceUpdate(this.cells, cells, cellIndex);\n        this.lastItemLen = this.items.length;\n        this.indexDirty = Math.max(offset - 1, 0);\n        this.scheduleUpdate();\n    }\n    /**\n     * This method marks the tail the items array as dirty, so they can be re-rendered.\n     *\n     * It's equivalent to calling:\n     *\n     * ```js\n     * virtualScroll.checkRange(lastItemLen);\n     * ```\n     */\n    async checkEnd() {\n        if (this.items) {\n            this.checkRange(this.lastItemLen);\n        }\n    }\n    updateVirtualScroll() {\n        // do nothing if virtual-scroll is disabled\n        if (!this.isEnabled || !this.scrollEl) {\n            return;\n        }\n        // unschedule future updates\n        if (this.timerUpdate) {\n            clearTimeout(this.timerUpdate);\n            this.timerUpdate = undefined;\n        }\n        // schedule DOM operations into the stencil queue\n        readTask(this.readVS.bind(this));\n        writeTask(this.writeVS.bind(this));\n    }\n    readVS() {\n        const { contentEl, scrollEl, el } = this;\n        let topOffset = 0;\n        let node = el;\n        while (node && node !== contentEl) {\n            topOffset += node.offsetTop;\n            node = node.parentElement;\n        }\n        this.viewportOffset = topOffset;\n        if (scrollEl) {\n            this.viewportHeight = scrollEl.offsetHeight;\n            this.currentScrollTop = scrollEl.scrollTop;\n        }\n    }\n    writeVS() {\n        const dirtyIndex = this.indexDirty;\n        // get visible viewport\n        const scrollTop = this.currentScrollTop - this.viewportOffset;\n        const viewport = getViewport(scrollTop, this.viewportHeight, 100);\n        // compute lazily the height index\n        const heightIndex = this.getHeightIndex();\n        // get array bounds of visible cells base in the viewport\n        const range = getRange(heightIndex, viewport, 2);\n        // fast path, do nothing\n        const shouldUpdate = getShouldUpdate(dirtyIndex, this.range, range);\n        if (!shouldUpdate) {\n            return;\n        }\n        this.range = range;\n        // in place mutation of the virtual DOM\n        updateVDom(this.virtualDom, heightIndex, this.cells, range);\n        // Write DOM\n        // Different code paths taken depending of the render API used\n        if (this.nodeRender) {\n            doRender(this.el, this.nodeRender, this.virtualDom, this.updateCellHeight.bind(this));\n        }\n        else if (this.domRender) {\n            this.domRender(this.virtualDom);\n        }\n        else if (this.renderItem) {\n            forceUpdate(this);\n        }\n    }\n    updateCellHeight(cell, node) {\n        const update = () => {\n            if (node['$ionCell'] === cell) {\n                const style = window.getComputedStyle(node);\n                const height = node.offsetHeight + parseFloat(style.getPropertyValue('margin-bottom'));\n                this.setCellHeight(cell, height);\n            }\n        };\n        if (node && node.componentOnReady) {\n            node.componentOnReady().then(update);\n        }\n        else {\n            update();\n        }\n    }\n    setCellHeight(cell, height) {\n        const index = cell.i;\n        // the cell might changed since the height update was scheduled\n        if (cell !== this.cells[index]) {\n            return;\n        }\n        if (cell.height !== height || cell.visible !== true) {\n            cell.visible = true;\n            cell.height = height;\n            this.indexDirty = Math.min(this.indexDirty, index);\n            this.scheduleUpdate();\n        }\n    }\n    scheduleUpdate() {\n        clearTimeout(this.timerUpdate);\n        this.timerUpdate = setTimeout(() => this.updateVirtualScroll(), 100);\n    }\n    updateState() {\n        const shouldEnable = !!(this.scrollEl &&\n            this.cells);\n        if (shouldEnable !== this.isEnabled) {\n            this.enableScrollEvents(shouldEnable);\n            if (shouldEnable) {\n                this.updateVirtualScroll();\n            }\n        }\n    }\n    calcCells() {\n        if (!this.items) {\n            return;\n        }\n        this.lastItemLen = this.items.length;\n        this.cells = calcCells(this.items, this.itemHeight, this.headerHeight, this.footerHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, 0, 0, this.lastItemLen);\n        this.indexDirty = 0;\n    }\n    getHeightIndex() {\n        if (this.indexDirty !== Infinity) {\n            this.calcHeightIndex(this.indexDirty);\n        }\n        return this.heightIndex;\n    }\n    calcHeightIndex(index = 0) {\n        // TODO: optimize, we don't need to calculate all the cells\n        this.heightIndex = resizeBuffer(this.heightIndex, this.cells.length);\n        this.totalHeight = calcHeightIndex(this.heightIndex, this.cells, index);\n        this.indexDirty = Infinity;\n    }\n    enableScrollEvents(shouldListen) {\n        if (this.rmEvent) {\n            this.rmEvent();\n            this.rmEvent = undefined;\n        }\n        const scrollEl = this.scrollEl;\n        if (scrollEl) {\n            this.isEnabled = shouldListen;\n            scrollEl.addEventListener('scroll', this.onScroll);\n            this.rmEvent = () => {\n                scrollEl.removeEventListener('scroll', this.onScroll);\n            };\n        }\n    }\n    renderVirtualNode(node) {\n        const { type, value, index } = node.cell;\n        switch (type) {\n            case CELL_TYPE_ITEM: return this.renderItem(value, index);\n            case CELL_TYPE_HEADER: return this.renderHeader(value, index);\n            case CELL_TYPE_FOOTER: return this.renderFooter(value, index);\n        }\n    }\n    render() {\n        return (h(Host, { style: {\n                height: `${this.totalHeight}px`\n            } }, this.renderItem && (h(VirtualProxy, { dom: this.virtualDom }, this.virtualDom.map(node => this.renderVirtualNode(node))))));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"itemHeight\": [\"itemsChanged\"],\n        \"headerHeight\": [\"itemsChanged\"],\n        \"footerHeight\": [\"itemsChanged\"],\n        \"items\": [\"itemsChanged\"]\n    }; }\n};\nconst VirtualProxy = ({ dom }, children, utils) => {\n    return utils.map(children, (child, i) => {\n        const node = dom[i];\n        const vattrs = child.vattrs || {};\n        let classes = vattrs.class || '';\n        classes += 'virtual-item ';\n        if (!node.visible) {\n            classes += 'virtual-loading';\n        }\n        return Object.assign(Object.assign({}, child), { vattrs: Object.assign(Object.assign({}, vattrs), { class: classes, style: Object.assign(Object.assign({}, vattrs.style), { transform: `translate3d(0,${node.top}px,0)` }) }) });\n    });\n};\nVirtualScroll.style = virtualScrollCss;\n\nexport { VirtualScroll as ion_virtual_scroll };\n"]}