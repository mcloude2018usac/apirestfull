{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/shadow-css-93af91ae.js"],"names":["_parenSuffix","_cssColonHostRe","RegExp","_cssColonHostContextRe","_cssColonSlottedRe","_polyfillHostNoCombinatorRe","_shadowDOMSelectorsRe","_polyfillHostRe","_colonHostRe","_colonSlottedRe","_colonHostContextRe","_commentRe","_commentWithHashRe","_ruleRe","_curlyRe","processRules","input","ruleCallback","inputWithEscapedBlocks","escapeBlocks","nextBlockIndex","escapedString","replace","selector","content","suffix","contentPrefix","startsWith","blocks","substring","length","rule","inputParts","split","resultParts","escapedBlocks","bracketCount","currentBlockParts","partIndex","part","push","join","convertColonRule","cssText","regExp","partReplacer","m","parts","r","i","p","trim","_polyfillHost","colonHostPartReplacer","host","colonHostContextPartReplacer","indexOf","scopeCss","scopeId","commentOriginalSelector","hostScopeId","slotScopeId","commentsWithHash","match","orgSelectors","processCommentedSelector","placeholder","comment","scoped","slotted","slotClass","selectors","compound","slottedSelector","prefixSelector","char","orgSelector","addedSelector","trimRight","updatedSelector","reduce","result","pattern","scopeSelectors","scopeSelectorText","hostSelector","slotSelector","map","shallowPart","scopeSelector","test","res","className","_","_scopeSelectorPart","scopedP","lastIndex","replaceBy","before","colon","after","t","matches","safeContent","placeholders","index","keep","pseudo","exp","scopedSelector","startIndex","sep","shouldScope","exec","separator","slice","slottedSelectors","forEach"],"mappings":"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","file":"x","sourcesContent":["/*\n Stencil Client Platform v1.12.4 | MIT Licensed | https://stenciljs.com\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nconst safeSelector = (selector) => {\n    const placeholders = [];\n    let index = 0;\n    let content;\n    // Replaces attribute selectors with placeholders.\n    // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n    selector = selector.replace(/(\\[[^\\]]*\\])/g, (_, keep) => {\n        const replaceBy = `__ph-${index}__`;\n        placeholders.push(keep);\n        index++;\n        return replaceBy;\n    });\n    // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n    // WS and \"+\" would otherwise be interpreted as selector separators.\n    content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\n        const replaceBy = `__ph-${index}__`;\n        placeholders.push(exp);\n        index++;\n        return pseudo + replaceBy;\n    });\n    const ss = {\n        content,\n        placeholders,\n    };\n    return ss;\n};\nconst restoreSafeSelector = (placeholders, content) => {\n    return content.replace(/__ph-(\\d+)__/g, (_, index) => placeholders[+index]);\n};\nconst _polyfillHost = '-shadowcsshost';\nconst _polyfillSlotted = '-shadowcssslotted';\n// note: :host-context pre-processed to -shadowcsshostcontext.\nconst _polyfillHostContext = '-shadowcsscontext';\nconst _parenSuffix = ')(?:\\\\((' + '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' + ')\\\\))?([^,{]*)';\nconst _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\nconst _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\nconst _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\nconst _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\nconst _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nconst _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];\nconst _selectorReSuffix = '([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$';\nconst _polyfillHostRe = /-shadowcsshost/gim;\nconst _colonHostRe = /:host/gim;\nconst _colonSlottedRe = /::slotted/gim;\nconst _colonHostContextRe = /:host-context/gim;\nconst _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\nconst stripComments = (input) => {\n    return input.replace(_commentRe, '');\n};\nconst _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\nconst extractCommentsWithHash = (input) => {\n    return input.match(_commentWithHashRe) || [];\n};\nconst _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nconst _curlyRe = /([{}])/g;\nconst OPEN_CURLY = '{';\nconst CLOSE_CURLY = '}';\nconst BLOCK_PLACEHOLDER = '%BLOCK%';\nconst processRules = (input, ruleCallback) => {\n    const inputWithEscapedBlocks = escapeBlocks(input);\n    let nextBlockIndex = 0;\n    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {\n        const selector = m[2];\n        let content = '';\n        let suffix = m[4];\n        let contentPrefix = '';\n        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n            contentPrefix = '{';\n        }\n        const cssRule = {\n            selector,\n            content,\n        };\n        const rule = ruleCallback(cssRule);\n        return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\n    });\n};\nconst escapeBlocks = (input) => {\n    const inputParts = input.split(_curlyRe);\n    const resultParts = [];\n    const escapedBlocks = [];\n    let bracketCount = 0;\n    let currentBlockParts = [];\n    for (let partIndex = 0; partIndex < inputParts.length; partIndex++) {\n        const part = inputParts[partIndex];\n        if (part === CLOSE_CURLY) {\n            bracketCount--;\n        }\n        if (bracketCount > 0) {\n            currentBlockParts.push(part);\n        }\n        else {\n            if (currentBlockParts.length > 0) {\n                escapedBlocks.push(currentBlockParts.join(''));\n                resultParts.push(BLOCK_PLACEHOLDER);\n                currentBlockParts = [];\n            }\n            resultParts.push(part);\n        }\n        if (part === OPEN_CURLY) {\n            bracketCount++;\n        }\n    }\n    if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(''));\n        resultParts.push(BLOCK_PLACEHOLDER);\n    }\n    const strEscapedBlocks = {\n        escapedString: resultParts.join(''),\n        blocks: escapedBlocks,\n    };\n    return strEscapedBlocks;\n};\nconst insertPolyfillHostInCssText = (selector) => {\n    selector = selector\n        .replace(_colonHostContextRe, _polyfillHostContext)\n        .replace(_colonHostRe, _polyfillHost)\n        .replace(_colonSlottedRe, _polyfillSlotted);\n    return selector;\n};\nconst convertColonRule = (cssText, regExp, partReplacer) => {\n    // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\n    return cssText.replace(regExp, (...m) => {\n        if (m[2]) {\n            const parts = m[2].split(',');\n            const r = [];\n            for (let i = 0; i < parts.length; i++) {\n                const p = parts[i].trim();\n                if (!p)\n                    break;\n                r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n            }\n            return r.join(',');\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n};\nconst colonHostPartReplacer = (host, part, suffix) => {\n    return host + part.replace(_polyfillHost, '') + suffix;\n};\nconst convertColonHost = (cssText) => {\n    return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\n};\nconst colonHostContextPartReplacer = (host, part, suffix) => {\n    if (part.indexOf(_polyfillHost) > -1) {\n        return colonHostPartReplacer(host, part, suffix);\n    }\n    else {\n        return host + part + suffix + ', ' + part + ' ' + host + suffix;\n    }\n};\nconst convertColonSlotted = (cssText, slotScopeId) => {\n    const slotClass = '.' + slotScopeId + ' > ';\n    const selectors = [];\n    cssText = cssText.replace(_cssColonSlottedRe, (...m) => {\n        if (m[2]) {\n            const compound = m[2].trim();\n            const suffix = m[3];\n            const slottedSelector = slotClass + compound + suffix;\n            let prefixSelector = '';\n            for (let i = m[4] - 1; i >= 0; i--) {\n                const char = m[5][i];\n                if (char === '}' || char === ',') {\n                    break;\n                }\n                prefixSelector = char + prefixSelector;\n            }\n            const orgSelector = prefixSelector + slottedSelector;\n            const addedSelector = `${prefixSelector.trimRight()}${slottedSelector.trim()}`;\n            if (orgSelector.trim() !== addedSelector.trim()) {\n                const updatedSelector = `${addedSelector}, ${orgSelector}`;\n                selectors.push({\n                    orgSelector,\n                    updatedSelector,\n                });\n            }\n            return slottedSelector;\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n    return {\n        selectors,\n        cssText,\n    };\n};\nconst convertColonHostContext = (cssText) => {\n    return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\n};\nconst convertShadowDOMSelectors = (cssText) => {\n    return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, ' '), cssText);\n};\nconst makeScopeMatcher = (scopeSelector) => {\n    const lre = /\\[/g;\n    const rre = /\\]/g;\n    scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n    return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n};\nconst selectorNeedsScoping = (selector, scopeSelector) => {\n    const re = makeScopeMatcher(scopeSelector);\n    return !re.test(selector);\n};\nconst applySimpleSelectorScope = (selector, scopeSelector, hostSelector) => {\n    // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n    _polyfillHostRe.lastIndex = 0;\n    if (_polyfillHostRe.test(selector)) {\n        const replaceBy = `.${hostSelector}`;\n        return selector\n            .replace(_polyfillHostNoCombinatorRe, (_, selector) => {\n            return selector.replace(/([^:]*)(:*)(.*)/, (_, before, colon, after) => {\n                return before + replaceBy + colon + after;\n            });\n        })\n            .replace(_polyfillHostRe, replaceBy + ' ');\n    }\n    return scopeSelector + ' ' + selector;\n};\nconst applyStrictSelectorScope = (selector, scopeSelector, hostSelector) => {\n    const isRe = /\\[is=([^\\]]*)\\]/g;\n    scopeSelector = scopeSelector.replace(isRe, (_, ...parts) => parts[0]);\n    const className = '.' + scopeSelector;\n    const _scopeSelectorPart = (p) => {\n        let scopedP = p.trim();\n        if (!scopedP) {\n            return '';\n        }\n        if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n            scopedP = applySimpleSelectorScope(p, scopeSelector, hostSelector);\n        }\n        else {\n            // remove :host since it should be unnecessary\n            const t = p.replace(_polyfillHostRe, '');\n            if (t.length > 0) {\n                const matches = t.match(/([^:]*)(:*)(.*)/);\n                if (matches) {\n                    scopedP = matches[1] + className + matches[2] + matches[3];\n                }\n            }\n        }\n        return scopedP;\n    };\n    const safeContent = safeSelector(selector);\n    selector = safeContent.content;\n    let scopedSelector = '';\n    let startIndex = 0;\n    let res;\n    const sep = /( |>|\\+|~(?!=))\\s*/g;\n    // If a selector appears before :host it should not be shimmed as it\n    // matches on ancestor elements and not on elements in the host's shadow\n    // `:host-context(div)` is transformed to\n    // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n    // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n    // Historically `component-tag:host` was matching the component so we also want to preserve\n    // this behavior to avoid breaking legacy apps (it should not match).\n    // The behavior should be:\n    // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n    // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n    //   `:host-context(tag)`)\n    const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n    // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n    let shouldScope = !hasHost;\n    while ((res = sep.exec(selector)) !== null) {\n        const separator = res[1];\n        const part = selector.slice(startIndex, res.index).trim();\n        shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n        const scopedPart = shouldScope ? _scopeSelectorPart(part) : part;\n        scopedSelector += `${scopedPart} ${separator} `;\n        startIndex = sep.lastIndex;\n    }\n    const part = selector.substring(startIndex);\n    shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n    scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n    // replace the placeholders with their original values\n    return restoreSafeSelector(safeContent.placeholders, scopedSelector);\n};\nconst scopeSelector = (selector, scopeSelectorText, hostSelector, slotSelector) => {\n    return selector\n        .split(',')\n        .map(shallowPart => {\n        if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\n            return shallowPart.trim();\n        }\n        if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\n            return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\n        }\n        else {\n            return shallowPart.trim();\n        }\n    })\n        .join(', ');\n};\nconst scopeSelectors = (cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) => {\n    return processRules(cssText, (rule) => {\n        let selector = rule.selector;\n        let content = rule.content;\n        if (rule.selector[0] !== '@') {\n            selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\n        }\n        else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n            content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector);\n        }\n        const cssRule = {\n            selector: selector.replace(/\\s{2,}/g, ' ').trim(),\n            content,\n        };\n        return cssRule;\n    });\n};\nconst scopeCssText = (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) => {\n    cssText = insertPolyfillHostInCssText(cssText);\n    cssText = convertColonHost(cssText);\n    cssText = convertColonHostContext(cssText);\n    const slotted = convertColonSlotted(cssText, slotScopeId);\n    cssText = slotted.cssText;\n    cssText = convertShadowDOMSelectors(cssText);\n    if (scopeId) {\n        cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId);\n    }\n    cssText = cssText.replace(/-shadowcsshost-no-combinator/g, `.${hostScopeId}`);\n    cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, ' $1 ');\n    return {\n        cssText: cssText.trim(),\n        slottedSelectors: slotted.selectors,\n    };\n};\nconst scopeCss = (cssText, scopeId, commentOriginalSelector) => {\n    const hostScopeId = scopeId + '-h';\n    const slotScopeId = scopeId + '-s';\n    const commentsWithHash = extractCommentsWithHash(cssText);\n    cssText = stripComments(cssText);\n    const orgSelectors = [];\n    if (commentOriginalSelector) {\n        const processCommentedSelector = (rule) => {\n            const placeholder = `/*!@___${orgSelectors.length}___*/`;\n            const comment = `/*!@${rule.selector}*/`;\n            orgSelectors.push({ placeholder, comment });\n            rule.selector = placeholder + rule.selector;\n            return rule;\n        };\n        cssText = processRules(cssText, rule => {\n            if (rule.selector[0] !== '@') {\n                return processCommentedSelector(rule);\n            }\n            else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n                rule.content = processRules(rule.content, processCommentedSelector);\n                return rule;\n            }\n            return rule;\n        });\n    }\n    const scoped = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId);\n    cssText = [scoped.cssText, ...commentsWithHash].join('\\n');\n    if (commentOriginalSelector) {\n        orgSelectors.forEach(({ placeholder, comment }) => {\n            cssText = cssText.replace(placeholder, comment);\n        });\n    }\n    scoped.slottedSelectors.forEach(slottedSelector => {\n        cssText = cssText.replace(slottedSelector.orgSelector, slottedSelector.updatedSelector);\n    });\n    return cssText;\n};\n\nexport { scopeCss };\n"]}