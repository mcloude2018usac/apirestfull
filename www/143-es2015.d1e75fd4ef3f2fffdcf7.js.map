{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/ion-nav_2.entry.js"],"names":["ViewController","component","params","this","state","container","element","a","delegate","removeViewFromDom","parentElement","remove","nav","undefined","matches","view","id","currentParams","keysA","Object","keys","keysB","length","key","convertToView","page","Nav","hostRef","transInstr","animationEnabled","useRouter","isTransitioning","destroyed","views","animated","ionNavWillLoad","ionNavWillChange","ionNavDidChange","gesture","enable","swipeGesture","root","setRoot","rootParams","document","querySelector","el","closest","mode","c","getBoolean","emit","rootChanged","createSwipeBackGesture","canStart","bind","onStart","onMove","onEnd","swipeGestureChanged","_destroy","destroy","componentProps","opts","done","queueTrns","insertStart","insertViews","insertIndex","insertComponents","removeStart","removeCount","indexOrViewCtrl","tiConfig","removeView","startIndex","setPages","direction","active","getActiveSync","Promise","resolve","changed","promise","r","finish","commonOpts","updateURL","viewIsReady","enteringEl","mark","p","markVisible","async","viewController","find","v","popTo","assign","push","tagName","index","canGoBackSync","getPreviousSync","indexOf","ti","skipIfBusy","reject","nextTrns","result","fireError","hasCompleted","requiresTransition","enteringView","leavingView","router","navChanged","rejectReason","shift","runTransition","prepareTI","getEnteringView","Error","init","postViewInit","enteringRequiresTransition","leavingRequiresTransition","transition","success","failed","viewsLength","viewControllers","map","filter","removeEnd","i","destroyQueue","finalBalance","console","warn","insertViewAt","destroyView","progressCallback","progressAnimation","ani","sbAni","leavingEl","animationOpts","showGoBack","baseEl","animationBuilder","animation","get","transitionFinish","cleanupView","cleanup","existingIndex","splice","activeView","activeViewIndex","stepValue","progressStep","shouldComplete","dur","onFinish","oneTimeCallback","newStepValue","easing","progressEnd","g","style","NavLink","routerDirection","onClick","pop"],"mappings":"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","file":"x","sourcesContent":["import { r as registerInstance, d as createEvent, h, e as getElement, H as Host } from './index-e23c3ffd.js';\nimport { b as getIonMode, c as config } from './ionic-global-fbc9a2ac.js';\nimport { b as assert } from './helpers-5c745fbd.js';\nimport { l as lifecycle, t as transition, s as setPageHidden, d as LIFECYCLE_WILL_UNLOAD, b as LIFECYCLE_WILL_LEAVE, c as LIFECYCLE_DID_LEAVE } from './index-b60886e1.js';\nimport { g as getTimeGivenProgression } from './cubic-bezier-685f606a.js';\nimport { a as attachComponent } from './framework-delegate-d1eb6504.js';\n\nconst VIEW_STATE_NEW = 1;\nconst VIEW_STATE_ATTACHED = 2;\nconst VIEW_STATE_DESTROYED = 3;\nclass ViewController {\n    constructor(component, params) {\n        this.component = component;\n        this.params = params;\n        this.state = VIEW_STATE_NEW;\n    }\n    async init(container) {\n        this.state = VIEW_STATE_ATTACHED;\n        if (!this.element) {\n            const component = this.component;\n            this.element = await attachComponent(this.delegate, container, component, ['ion-page', 'ion-page-invisible'], this.params);\n        }\n    }\n    /**\n     * DOM WRITE\n     */\n    _destroy() {\n        assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\n        const element = this.element;\n        if (element) {\n            if (this.delegate) {\n                this.delegate.removeViewFromDom(element.parentElement, element);\n            }\n            else {\n                element.remove();\n            }\n        }\n        this.nav = undefined;\n        this.state = VIEW_STATE_DESTROYED;\n    }\n}\nconst matches = (view, id, params) => {\n    if (!view) {\n        return false;\n    }\n    if (view.component !== id) {\n        return false;\n    }\n    const currentParams = view.params;\n    if (currentParams === params) {\n        return true;\n    }\n    if (!currentParams && !params) {\n        return true;\n    }\n    if (!currentParams || !params) {\n        return false;\n    }\n    const keysA = Object.keys(currentParams);\n    const keysB = Object.keys(params);\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n    // Test for A's keys different from B.\n    for (const key of keysA) {\n        if (currentParams[key] !== params[key]) {\n            return false;\n        }\n    }\n    return true;\n};\nconst convertToView = (page, params) => {\n    if (!page) {\n        return null;\n    }\n    if (page instanceof ViewController) {\n        return page;\n    }\n    return new ViewController(page, params);\n};\nconst convertToViews = (pages) => {\n    return pages.map(page => {\n        if (page instanceof ViewController) {\n            return page;\n        }\n        if ('page' in page) {\n            return convertToView(page.page, page.params);\n        }\n        return convertToView(page, undefined);\n    }).filter(v => v !== null);\n};\n\nconst navCss = \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\";\n\nconst Nav = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.transInstr = [];\n        this.animationEnabled = true;\n        this.useRouter = false;\n        this.isTransitioning = false;\n        this.destroyed = false;\n        this.views = [];\n        /**\n         * If `true`, the nav should animate the transition of components.\n         */\n        this.animated = true;\n        this.ionNavWillLoad = createEvent(this, \"ionNavWillLoad\", 7);\n        this.ionNavWillChange = createEvent(this, \"ionNavWillChange\", 3);\n        this.ionNavDidChange = createEvent(this, \"ionNavDidChange\", 3);\n    }\n    swipeGestureChanged() {\n        if (this.gesture) {\n            this.gesture.enable(this.swipeGesture === true);\n        }\n    }\n    rootChanged() {\n        if (this.root !== undefined) {\n            if (!this.useRouter) {\n                this.setRoot(this.root, this.rootParams);\n            }\n        }\n    }\n    componentWillLoad() {\n        this.useRouter =\n            !!document.querySelector('ion-router') &&\n                !this.el.closest('[no-router]');\n        if (this.swipeGesture === undefined) {\n            const mode = getIonMode(this);\n            this.swipeGesture = config.getBoolean('swipeBackEnabled', mode === 'ios');\n        }\n        this.ionNavWillLoad.emit();\n    }\n    async componentDidLoad() {\n        this.rootChanged();\n        this.gesture = (await import('./swipe-back-7b4b8b66.js')).createSwipeBackGesture(this.el, this.canStart.bind(this), this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this));\n        this.swipeGestureChanged();\n    }\n    componentDidUnload() {\n        for (const view of this.views) {\n            lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n            view._destroy();\n        }\n        if (this.gesture) {\n            this.gesture.destroy();\n            this.gesture = undefined;\n        }\n        // release swipe back gesture and transition\n        this.transInstr.length = this.views.length = 0;\n        this.destroyed = true;\n    }\n    /**\n     * Push a new component onto the current navigation stack. Pass any additional\n     * information along as an object. This additional information is accessible\n     * through NavParams.\n     *\n     * @param component The component to push onto the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    push(component, componentProps, opts, done) {\n        return this.queueTrns({\n            insertStart: -1,\n            insertViews: [{ page: component, params: componentProps }],\n            opts\n        }, done);\n    }\n    /**\n     * Inserts a component into the navigation stack at the specified index.\n     * This is useful to add a component at any point in the navigation stack.\n     *\n     * @param insertIndex The index to insert the component at in the stack.\n     * @param component The component to insert into the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    insert(insertIndex, component, componentProps, opts, done) {\n        return this.queueTrns({\n            insertStart: insertIndex,\n            insertViews: [{ page: component, params: componentProps }],\n            opts\n        }, done);\n    }\n    /**\n     * Inserts an array of components into the navigation stack at the specified index.\n     * The last component in the array will become instantiated as a view, and animate\n     * in to become the active view.\n     *\n     * @param insertIndex The index to insert the components at in the stack.\n     * @param insertComponents The components to insert into the navigation stack.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    insertPages(insertIndex, insertComponents, opts, done) {\n        return this.queueTrns({\n            insertStart: insertIndex,\n            insertViews: insertComponents,\n            opts\n        }, done);\n    }\n    /**\n     * Pop a component off of the navigation stack. Navigates back from the current\n     * component.\n     *\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    pop(opts, done) {\n        return this.queueTrns({\n            removeStart: -1,\n            removeCount: 1,\n            opts\n        }, done);\n    }\n    /**\n     * Pop to a specific index in the navigation stack.\n     *\n     * @param indexOrViewCtrl The index or view controller to pop to.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    popTo(indexOrViewCtrl, opts, done) {\n        const tiConfig = {\n            removeStart: -1,\n            removeCount: -1,\n            opts\n        };\n        if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\n            tiConfig.removeView = indexOrViewCtrl;\n            tiConfig.removeStart = 1;\n        }\n        else if (typeof indexOrViewCtrl === 'number') {\n            tiConfig.removeStart = indexOrViewCtrl + 1;\n        }\n        return this.queueTrns(tiConfig, done);\n    }\n    /**\n     * Navigate back to the root of the stack, no matter how far back that is.\n     *\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    popToRoot(opts, done) {\n        return this.queueTrns({\n            removeStart: 1,\n            removeCount: -1,\n            opts\n        }, done);\n    }\n    /**\n     * Removes a component from the navigation stack at the specified index.\n     *\n     * @param startIndex The number to begin removal at.\n     * @param removeCount The number of components to remove.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    removeIndex(startIndex, removeCount = 1, opts, done) {\n        return this.queueTrns({\n            removeStart: startIndex,\n            removeCount,\n            opts\n        }, done);\n    }\n    /**\n     * Set the root for the current navigation stack to a component.\n     *\n     * @param component The component to set as the root of the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    setRoot(component, componentProps, opts, done) {\n        return this.setPages([{ page: component, params: componentProps }], opts, done);\n    }\n    /**\n     * Set the views of the current navigation stack and navigate to the last view.\n     * By default animations are disabled, but they can be enabled by passing options\n     * to the navigation controller. Navigation parameters can also be passed to the\n     * individual pages in the array.\n     *\n     * @param views The list of views to set as the navigation stack.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    setPages(views, opts, done) {\n        if (opts == null) {\n            opts = {};\n        }\n        // if animation wasn't set to true then default it to NOT animate\n        if (opts.animated !== true) {\n            opts.animated = false;\n        }\n        return this.queueTrns({\n            insertStart: 0,\n            insertViews: views,\n            removeStart: 0,\n            removeCount: -1,\n            opts\n        }, done);\n    }\n    /** @internal */\n    setRouteId(id, params, direction) {\n        const active = this.getActiveSync();\n        if (matches(active, id, params)) {\n            return Promise.resolve({\n                changed: false,\n                element: active.element\n            });\n        }\n        let resolve;\n        const promise = new Promise(r => (resolve = r));\n        let finish;\n        const commonOpts = {\n            updateURL: false,\n            viewIsReady: enteringEl => {\n                let mark;\n                const p = new Promise(r => (mark = r));\n                resolve({\n                    changed: true,\n                    element: enteringEl,\n                    markVisible: async () => {\n                        mark();\n                        await finish;\n                    }\n                });\n                return p;\n            }\n        };\n        if (direction === 'root') {\n            finish = this.setRoot(id, params, commonOpts);\n        }\n        else {\n            const viewController = this.views.find(v => matches(v, id, params));\n            if (viewController) {\n                finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), { direction: 'back' }));\n            }\n            else if (direction === 'forward') {\n                finish = this.push(id, params, commonOpts);\n            }\n            else if (direction === 'back') {\n                finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animated: true }));\n            }\n        }\n        return promise;\n    }\n    /** @internal */\n    async getRouteId() {\n        const active = this.getActiveSync();\n        return active\n            ? {\n                id: active.element.tagName,\n                params: active.params,\n                element: active.element\n            }\n            : undefined;\n    }\n    /**\n     * Get the active view.\n     */\n    getActive() {\n        return Promise.resolve(this.getActiveSync());\n    }\n    /**\n     * Get the view at the specified index.\n     *\n     * @param index The index of the view.\n     */\n    getByIndex(index) {\n        return Promise.resolve(this.views[index]);\n    }\n    /**\n     * Returns `true` if the current view can go back.\n     *\n     * @param view The view to check.\n     */\n    canGoBack(view) {\n        return Promise.resolve(this.canGoBackSync(view));\n    }\n    /**\n     * Get the previous view.\n     *\n     * @param view The view to get.\n     */\n    getPrevious(view) {\n        return Promise.resolve(this.getPreviousSync(view));\n    }\n    getLength() {\n        return this.views.length;\n    }\n    getActiveSync() {\n        return this.views[this.views.length - 1];\n    }\n    canGoBackSync(view = this.getActiveSync()) {\n        return !!(view && this.getPreviousSync(view));\n    }\n    getPreviousSync(view = this.getActiveSync()) {\n        if (!view) {\n            return undefined;\n        }\n        const views = this.views;\n        const index = views.indexOf(view);\n        return index > 0 ? views[index - 1] : undefined;\n    }\n    // _queueTrns() adds a navigation stack change to the queue and schedules it to run:\n    // 1. _nextTrns(): consumes the next transition in the queue\n    // 2. _viewInit(): initializes enteringView if required\n    // 3. _viewTest(): ensures canLeave/canEnter Returns `true`, so the operation can continue\n    // 4. _postViewInit(): add/remove the views from the navigation stack\n    // 5. _transitionInit(): initializes the visual transition if required and schedules it to run\n    // 6. _viewAttachToDOM(): attaches the enteringView to the DOM\n    // 7. _transitionStart(): called once the transition actually starts, it initializes the Animation underneath.\n    // 8. _transitionFinish(): called once the transition finishes\n    // 9. _cleanup(): syncs the navigation internal state with the DOM. For example it removes the pages from the DOM or hides/show them.\n    queueTrns(ti, done) {\n        if (this.isTransitioning && ti.opts != null && ti.opts.skipIfBusy) {\n            return Promise.resolve(false);\n        }\n        const promise = new Promise((resolve, reject) => {\n            ti.resolve = resolve;\n            ti.reject = reject;\n        });\n        ti.done = done;\n        // Normalize empty\n        if (ti.insertViews && ti.insertViews.length === 0) {\n            ti.insertViews = undefined;\n        }\n        // Enqueue transition instruction\n        this.transInstr.push(ti);\n        // if there isn't a transition already happening\n        // then this will kick off this transition\n        this.nextTrns();\n        return promise;\n    }\n    success(result, ti) {\n        if (this.destroyed) {\n            this.fireError('nav controller was destroyed', ti);\n            return;\n        }\n        if (ti.done) {\n            ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\n        }\n        ti.resolve(result.hasCompleted);\n        if (ti.opts.updateURL !== false && this.useRouter) {\n            const router = document.querySelector('ion-router');\n            if (router) {\n                const direction = result.direction === 'back' ? 'back' : 'forward';\n                router.navChanged(direction);\n            }\n        }\n    }\n    failed(rejectReason, ti) {\n        if (this.destroyed) {\n            this.fireError('nav controller was destroyed', ti);\n            return;\n        }\n        this.transInstr.length = 0;\n        this.fireError(rejectReason, ti);\n    }\n    fireError(rejectReason, ti) {\n        if (ti.done) {\n            ti.done(false, false, rejectReason);\n        }\n        if (ti.reject && !this.destroyed) {\n            ti.reject(rejectReason);\n        }\n        else {\n            ti.resolve(false);\n        }\n    }\n    nextTrns() {\n        // this is the framework's bread 'n butta function\n        // only one transition is allowed at any given time\n        if (this.isTransitioning) {\n            return false;\n        }\n        // there is no transition happening right now\n        // get the next instruction\n        const ti = this.transInstr.shift();\n        if (!ti) {\n            return false;\n        }\n        this.runTransition(ti);\n        return true;\n    }\n    async runTransition(ti) {\n        try {\n            // set that this nav is actively transitioning\n            this.ionNavWillChange.emit();\n            this.isTransitioning = true;\n            this.prepareTI(ti);\n            const leavingView = this.getActiveSync();\n            const enteringView = this.getEnteringView(ti, leavingView);\n            if (!leavingView && !enteringView) {\n                throw new Error('no views in the stack to be removed');\n            }\n            if (enteringView && enteringView.state === VIEW_STATE_NEW) {\n                await enteringView.init(this.el);\n            }\n            this.postViewInit(enteringView, leavingView, ti);\n            // Needs transition?\n            const requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) &&\n                enteringView !== leavingView;\n            const result = requiresTransition\n                ? await this.transition(enteringView, leavingView, ti)\n                : {\n                    // transition is not required, so we are already done!\n                    // they're inserting/removing the views somewhere in the middle or\n                    // beginning, so visually nothing needs to animate/transition\n                    // resolve immediately because there's no animation that's happening\n                    hasCompleted: true,\n                    requiresTransition: false\n                };\n            this.success(result, ti);\n            this.ionNavDidChange.emit();\n        }\n        catch (rejectReason) {\n            this.failed(rejectReason, ti);\n        }\n        this.isTransitioning = false;\n        this.nextTrns();\n    }\n    prepareTI(ti) {\n        const viewsLength = this.views.length;\n        ti.opts = ti.opts || {};\n        if (ti.opts.delegate === undefined) {\n            ti.opts.delegate = this.delegate;\n        }\n        if (ti.removeView !== undefined) {\n            assert(ti.removeStart !== undefined, 'removeView needs removeStart');\n            assert(ti.removeCount !== undefined, 'removeView needs removeCount');\n            const index = this.views.indexOf(ti.removeView);\n            if (index < 0) {\n                throw new Error('removeView was not found');\n            }\n            ti.removeStart += index;\n        }\n        if (ti.removeStart !== undefined) {\n            if (ti.removeStart < 0) {\n                ti.removeStart = viewsLength - 1;\n            }\n            if (ti.removeCount < 0) {\n                ti.removeCount = viewsLength - ti.removeStart;\n            }\n            ti.leavingRequiresTransition =\n                ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\n        }\n        if (ti.insertViews) {\n            // allow -1 to be passed in to auto push it on the end\n            // and clean up the index if it's larger then the size of the stack\n            if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\n                ti.insertStart = viewsLength;\n            }\n            ti.enteringRequiresTransition = ti.insertStart === viewsLength;\n        }\n        const insertViews = ti.insertViews;\n        if (!insertViews) {\n            return;\n        }\n        assert(insertViews.length > 0, 'length can not be zero');\n        const viewControllers = convertToViews(insertViews);\n        if (viewControllers.length === 0) {\n            throw new Error('invalid views to insert');\n        }\n        // Check all the inserted view are correct\n        for (const view of viewControllers) {\n            view.delegate = ti.opts.delegate;\n            const nav = view.nav;\n            if (nav && nav !== this) {\n                throw new Error('inserted view was already inserted');\n            }\n            if (view.state === VIEW_STATE_DESTROYED) {\n                throw new Error('inserted view was already destroyed');\n            }\n        }\n        ti.insertViews = viewControllers;\n    }\n    getEnteringView(ti, leavingView) {\n        const insertViews = ti.insertViews;\n        if (insertViews !== undefined) {\n            // grab the very last view of the views to be inserted\n            // and initialize it as the new entering view\n            return insertViews[insertViews.length - 1];\n        }\n        const removeStart = ti.removeStart;\n        if (removeStart !== undefined) {\n            const views = this.views;\n            const removeEnd = removeStart + ti.removeCount;\n            for (let i = views.length - 1; i >= 0; i--) {\n                const view = views[i];\n                if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\n                    return view;\n                }\n            }\n        }\n        return undefined;\n    }\n    postViewInit(enteringView, leavingView, ti) {\n        assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\n        assert(ti.resolve, 'resolve must be valid');\n        assert(ti.reject, 'reject must be valid');\n        const opts = ti.opts;\n        const insertViews = ti.insertViews;\n        const removeStart = ti.removeStart;\n        const removeCount = ti.removeCount;\n        let destroyQueue;\n        // there are views to remove\n        if (removeStart !== undefined && removeCount !== undefined) {\n            assert(removeStart >= 0, 'removeStart can not be negative');\n            assert(removeCount >= 0, 'removeCount can not be negative');\n            destroyQueue = [];\n            for (let i = 0; i < removeCount; i++) {\n                const view = this.views[i + removeStart];\n                if (view && view !== enteringView && view !== leavingView) {\n                    destroyQueue.push(view);\n                }\n            }\n            // default the direction to \"back\"\n            opts.direction = opts.direction || 'back';\n        }\n        const finalBalance = this.views.length +\n            (insertViews !== undefined ? insertViews.length : 0) -\n            (removeCount !== undefined ? removeCount : 0);\n        assert(finalBalance >= 0, 'final balance can not be negative');\n        if (finalBalance === 0) {\n            console.warn(`You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.`, this, this.el);\n            throw new Error('navigation stack needs at least one root page');\n        }\n        // At this point the transition can not be rejected, any throw should be an error\n        // there are views to insert\n        if (insertViews) {\n            // add the views to the\n            let insertIndex = ti.insertStart;\n            for (const view of insertViews) {\n                this.insertViewAt(view, insertIndex);\n                insertIndex++;\n            }\n            if (ti.enteringRequiresTransition) {\n                // default to forward if not already set\n                opts.direction = opts.direction || 'forward';\n            }\n        }\n        // if the views to be removed are in the beginning or middle\n        // and there is not a view that needs to visually transition out\n        // then just destroy them and don't transition anything\n        // batch all of lifecycles together\n        // let's make sure, callbacks are zoned\n        if (destroyQueue && destroyQueue.length > 0) {\n            for (const view of destroyQueue) {\n                lifecycle(view.element, LIFECYCLE_WILL_LEAVE);\n                lifecycle(view.element, LIFECYCLE_DID_LEAVE);\n                lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n            }\n            // once all lifecycle events has been delivered, we can safely detroy the views\n            for (const view of destroyQueue) {\n                this.destroyView(view);\n            }\n        }\n    }\n    async transition(enteringView, leavingView, ti) {\n        // we should animate (duration > 0) if the pushed page is not the first one (startup)\n        // or if it is a portal (modal, actionsheet, etc.)\n        const opts = ti.opts;\n        const progressCallback = opts.progressAnimation\n            ? (ani) => this.sbAni = ani\n            : undefined;\n        const mode = getIonMode(this);\n        const enteringEl = enteringView.element;\n        const leavingEl = leavingView && leavingView.element;\n        const animationOpts = Object.assign({ mode, showGoBack: this.canGoBackSync(enteringView), baseEl: this.el, animationBuilder: this.animation || opts.animationBuilder || config.get('navAnimation'), progressCallback, animated: this.animated && config.getBoolean('animated', true), enteringEl,\n            leavingEl }, opts);\n        const { hasCompleted } = await transition(animationOpts);\n        return this.transitionFinish(hasCompleted, enteringView, leavingView, opts);\n    }\n    transitionFinish(hasCompleted, enteringView, leavingView, opts) {\n        const cleanupView = hasCompleted ? enteringView : leavingView;\n        if (cleanupView) {\n            this.cleanup(cleanupView);\n        }\n        return {\n            hasCompleted,\n            requiresTransition: true,\n            enteringView,\n            leavingView,\n            direction: opts.direction\n        };\n    }\n    insertViewAt(view, index) {\n        const views = this.views;\n        const existingIndex = views.indexOf(view);\n        if (existingIndex > -1) {\n            // this view is already in the stack!!\n            // move it to its new location\n            assert(view.nav === this, 'view is not part of the nav');\n            views.splice(index, 0, views.splice(existingIndex, 1)[0]);\n        }\n        else {\n            assert(!view.nav, 'nav is used');\n            // this is a new view to add to the stack\n            // create the new entering view\n            view.nav = this;\n            // insert the entering view into the correct index in the stack\n            views.splice(index, 0, view);\n        }\n    }\n    removeView(view) {\n        assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\n        const views = this.views;\n        const index = views.indexOf(view);\n        assert(index > -1, 'view must be part of the stack');\n        if (index >= 0) {\n            views.splice(index, 1);\n        }\n    }\n    destroyView(view) {\n        view._destroy();\n        this.removeView(view);\n    }\n    /**\n     * DOM WRITE\n     */\n    cleanup(activeView) {\n        // ok, cleanup time!! Destroy all of the views that are\n        // INACTIVE and come after the active view\n        // only do this if the views exist, though\n        if (this.destroyed) {\n            return;\n        }\n        const views = this.views;\n        const activeViewIndex = views.indexOf(activeView);\n        for (let i = views.length - 1; i >= 0; i--) {\n            const view = views[i];\n            const element = view.element;\n            if (i > activeViewIndex) {\n                // this view comes after the active view\n                // let's unload it\n                lifecycle(element, LIFECYCLE_WILL_UNLOAD);\n                this.destroyView(view);\n            }\n            else if (i < activeViewIndex) {\n                // this view comes before the active view\n                // and it is not a portal then ensure it is hidden\n                setPageHidden(element, true);\n            }\n        }\n    }\n    canStart() {\n        return (!!this.swipeGesture &&\n            !this.isTransitioning &&\n            this.transInstr.length === 0 &&\n            this.animationEnabled &&\n            this.canGoBackSync());\n    }\n    onStart() {\n        this.queueTrns({\n            removeStart: -1,\n            removeCount: 1,\n            opts: {\n                direction: 'back',\n                progressAnimation: true\n            }\n        }, undefined);\n    }\n    onMove(stepValue) {\n        if (this.sbAni) {\n            this.sbAni.progressStep(stepValue);\n        }\n    }\n    onEnd(shouldComplete, stepValue, dur) {\n        if (this.sbAni) {\n            this.animationEnabled = false;\n            this.sbAni.onFinish(() => {\n                this.animationEnabled = true;\n            }, { oneTimeCallback: true });\n            // Account for rounding errors in JS\n            let newStepValue = (shouldComplete) ? -0.001 : 0.001;\n            /**\n             * Animation will be reversed here, so need to\n             * reverse the easing curve as well\n             *\n             * Additionally, we need to account for the time relative\n             * to the new easing curve, as `stepValue` is going to be given\n             * in terms of a linear curve.\n             */\n            if (!shouldComplete) {\n                this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');\n                newStepValue += getTimeGivenProgression([0, 0], [1, 0], [0.68, 0.28], [1, 1], stepValue)[0];\n            }\n            else {\n                newStepValue += getTimeGivenProgression([0, 0], [0.32, 0.72], [0, 1], [1, 1], stepValue)[0];\n            }\n            this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);\n        }\n    }\n    render() {\n        return (h(\"slot\", null));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"swipeGesture\": [\"swipeGestureChanged\"],\n        \"root\": [\"rootChanged\"]\n    }; }\n};\nNav.style = navCss;\n\nconst navLink = (el, routerDirection, component, componentProps) => {\n    const nav = el.closest('ion-nav');\n    if (nav) {\n        if (routerDirection === 'forward') {\n            if (component !== undefined) {\n                return nav.push(component, componentProps, { skipIfBusy: true });\n            }\n        }\n        else if (routerDirection === 'root') {\n            if (component !== undefined) {\n                return nav.setRoot(component, componentProps, { skipIfBusy: true });\n            }\n        }\n        else if (routerDirection === 'back') {\n            return nav.pop({ skipIfBusy: true });\n        }\n    }\n    return Promise.resolve(false);\n};\n\nconst NavLink = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /**\n         * The transition direction when navigating to another page.\n         */\n        this.routerDirection = 'forward';\n        this.onClick = () => {\n            return navLink(this.el, this.routerDirection, this.component, this.componentProps);\n        };\n    }\n    render() {\n        return (h(Host, { onClick: this.onClick }));\n    }\n    get el() { return getElement(this); }\n};\n\nexport { Nav as ion_nav, NavLink as ion_nav_link };\n"]}