{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/input-shims-77712174.js"],"names":["cloneMap","WeakMap","relocateInput","componentEl","inputEl","shouldRelocate","inputRelativeY","has","addClone","removeClone","isFocused","input","getRootNode","activeElement","parentEl","parentNode","clonedEl","cloneNode","classList","add","tabIndex","appendChild","set","tx","ownerDocument","dir","style","pointerEvents","transform","clone","get","remove","SKIP_SELECTOR","setScrollPadding","keyboardHeight","tagName","parentElement","el","closest","timer","clearTimeout","setProperty","setTimeout","startInputShims","config","doc","document","getNumber","scrollAssist","getBoolean","hideCaret","inputBlurring","scrollPadding","inputs","Array","from","querySelectorAll","hideCaretMap","scrollAssistMap","registerInput","async","componentOnReady","inputRoot","shadowRoot","querySelector","scrollEl","footerEl","rmFn","scrollHideCaret","shouldHideCaret","onBlur","showCaret","addEventListener","removeEventListener","contentEl","coord","touchStart","ev","touchEnd","endCoord","threshold","startCoord","deltaX","x","deltaY","y","preventDefault","stopPropagation","scrollData","inputRect","contentRect","platformHeight","inputTop","top","inputBottom","bottom","visibleAreaTop","safeAreaTop","distanceToBottom","Math","min","distanceToTop","desiredScrollAmount","round","scrollAmount","distance","abs","scrollDuration","max","inputSafeY","getBoundingClientRect","defaultView","innerHeight","focus","window","scrollContent","scrollContentTimeout","scrollByPoint","getScrollElement","scrollHeight","clientHeight","scrollTop","focused","didScroll","active","matches","tapped","target","blur","detail","fn"],"mappings":"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","file":"x","sourcesContent":["import { p as pointerCoord } from './helpers-5c745fbd.js';\n\nconst cloneMap = new WeakMap();\nconst relocateInput = (componentEl, inputEl, shouldRelocate, inputRelativeY = 0) => {\n    if (cloneMap.has(componentEl) === shouldRelocate) {\n        return;\n    }\n    if (shouldRelocate) {\n        addClone(componentEl, inputEl, inputRelativeY);\n    }\n    else {\n        removeClone(componentEl, inputEl);\n    }\n};\nconst isFocused = (input) => {\n    return input === input.getRootNode().activeElement;\n};\nconst addClone = (componentEl, inputEl, inputRelativeY) => {\n    // this allows for the actual input to receive the focus from\n    // the user's touch event, but before it receives focus, it\n    // moves the actual input to a location that will not screw\n    // up the app's layout, and does not allow the native browser\n    // to attempt to scroll the input into place (messing up headers/footers)\n    // the cloned input fills the area of where native input should be\n    // while the native input fakes out the browser by relocating itself\n    // before it receives the actual focus event\n    // We hide the focused input (with the visible caret) invisible by making it scale(0),\n    const parentEl = inputEl.parentNode;\n    // DOM WRITES\n    const clonedEl = inputEl.cloneNode(false);\n    clonedEl.classList.add('cloned-input');\n    clonedEl.tabIndex = -1;\n    parentEl.appendChild(clonedEl);\n    cloneMap.set(componentEl, clonedEl);\n    const doc = componentEl.ownerDocument;\n    const tx = doc.dir === 'rtl' ? 9999 : -9999;\n    componentEl.style.pointerEvents = 'none';\n    inputEl.style.transform = `translate3d(${tx}px,${inputRelativeY}px,0) scale(0)`;\n};\nconst removeClone = (componentEl, inputEl) => {\n    const clone = cloneMap.get(componentEl);\n    if (clone) {\n        cloneMap.delete(componentEl);\n        clone.remove();\n    }\n    componentEl.style.pointerEvents = '';\n    inputEl.style.transform = '';\n};\n\nconst enableHideCaretOnScroll = (componentEl, inputEl, scrollEl) => {\n    if (!scrollEl || !inputEl) {\n        return () => { return; };\n    }\n    const scrollHideCaret = (shouldHideCaret) => {\n        if (isFocused(inputEl)) {\n            relocateInput(componentEl, inputEl, shouldHideCaret);\n        }\n    };\n    const onBlur = () => relocateInput(componentEl, inputEl, false);\n    const hideCaret = () => scrollHideCaret(true);\n    const showCaret = () => scrollHideCaret(false);\n    scrollEl.addEventListener('ionScrollStart', hideCaret);\n    scrollEl.addEventListener('ionScrollEnd', showCaret);\n    inputEl.addEventListener('blur', onBlur);\n    return () => {\n        scrollEl.removeEventListener('ionScrollStart', hideCaret);\n        scrollEl.removeEventListener('ionScrollEnd', showCaret);\n        inputEl.addEventListener('ionBlur', onBlur);\n    };\n};\n\nconst SKIP_SELECTOR = 'input, textarea, [no-blur]';\nconst enableInputBlurring = () => {\n    let focused = true;\n    let didScroll = false;\n    const doc = document;\n    const onScroll = () => {\n        didScroll = true;\n    };\n    const onFocusin = () => {\n        focused = true;\n    };\n    const onTouchend = (ev) => {\n        // if app did scroll return early\n        if (didScroll) {\n            didScroll = false;\n            return;\n        }\n        const active = doc.activeElement;\n        if (!active) {\n            return;\n        }\n        // only blur if the active element is a text-input or a textarea\n        if (active.matches(SKIP_SELECTOR)) {\n            return;\n        }\n        // if the selected target is the active element, do not blur\n        const tapped = ev.target;\n        if (tapped === active) {\n            return;\n        }\n        if (tapped.matches(SKIP_SELECTOR) || tapped.closest(SKIP_SELECTOR)) {\n            return;\n        }\n        focused = false;\n        // TODO: find a better way, why 50ms?\n        setTimeout(() => {\n            if (!focused) {\n                active.blur();\n            }\n        }, 50);\n    };\n    doc.addEventListener('ionScrollStart', onScroll);\n    doc.addEventListener('focusin', onFocusin, true);\n    doc.addEventListener('touchend', onTouchend, false);\n    return () => {\n        doc.removeEventListener('ionScrollStart', onScroll, true);\n        doc.removeEventListener('focusin', onFocusin, true);\n        doc.removeEventListener('touchend', onTouchend, false);\n    };\n};\n\nconst SCROLL_ASSIST_SPEED = 0.3;\nconst getScrollData = (componentEl, contentEl, keyboardHeight) => {\n    const itemEl = componentEl.closest('ion-item,[ion-item]') || componentEl;\n    return calcScrollData(itemEl.getBoundingClientRect(), contentEl.getBoundingClientRect(), keyboardHeight, componentEl.ownerDocument.defaultView.innerHeight);\n};\nconst calcScrollData = (inputRect, contentRect, keyboardHeight, platformHeight) => {\n    // compute input's Y values relative to the body\n    const inputTop = inputRect.top;\n    const inputBottom = inputRect.bottom;\n    // compute visible area\n    const visibleAreaTop = contentRect.top;\n    const visibleAreaBottom = Math.min(contentRect.bottom, platformHeight - keyboardHeight);\n    // compute safe area\n    const safeAreaTop = visibleAreaTop + 15;\n    const safeAreaBottom = visibleAreaBottom * 0.5;\n    // figure out if each edge of the input is within the safe area\n    const distanceToBottom = safeAreaBottom - inputBottom;\n    const distanceToTop = safeAreaTop - inputTop;\n    // desiredScrollAmount is the negated distance to the safe area according to our calculations.\n    const desiredScrollAmount = Math.round((distanceToBottom < 0)\n        ? -distanceToBottom\n        : (distanceToTop > 0)\n            ? -distanceToTop\n            : 0);\n    // our calculations make some assumptions that aren't always true, like the keyboard being closed when an input\n    // gets focus, so make sure we don't scroll the input above the visible area\n    const scrollAmount = Math.min(desiredScrollAmount, inputTop - visibleAreaTop);\n    const distance = Math.abs(scrollAmount);\n    const duration = distance / SCROLL_ASSIST_SPEED;\n    const scrollDuration = Math.min(400, Math.max(150, duration));\n    return {\n        scrollAmount,\n        scrollDuration,\n        scrollPadding: keyboardHeight,\n        inputSafeY: -(inputTop - safeAreaTop) + 4\n    };\n};\n\nconst enableScrollAssist = (componentEl, inputEl, contentEl, footerEl, keyboardHeight) => {\n    let coord;\n    const touchStart = (ev) => {\n        coord = pointerCoord(ev);\n    };\n    const touchEnd = (ev) => {\n        // input cover touchend/mouseup\n        if (!coord) {\n            return;\n        }\n        // get where the touchend/mouseup ended\n        const endCoord = pointerCoord(ev);\n        // focus this input if the pointer hasn't moved XX pixels\n        // and the input doesn't already have focus\n        if (!hasPointerMoved(6, coord, endCoord) && !isFocused(inputEl)) {\n            ev.preventDefault();\n            ev.stopPropagation();\n            // begin the input focus process\n            jsSetFocus(componentEl, inputEl, contentEl, footerEl, keyboardHeight);\n        }\n    };\n    componentEl.addEventListener('touchstart', touchStart, true);\n    componentEl.addEventListener('touchend', touchEnd, true);\n    return () => {\n        componentEl.removeEventListener('touchstart', touchStart, true);\n        componentEl.removeEventListener('touchend', touchEnd, true);\n    };\n};\nconst jsSetFocus = async (componentEl, inputEl, contentEl, footerEl, keyboardHeight) => {\n    if (!contentEl && !footerEl) {\n        return;\n    }\n    const scrollData = getScrollData(componentEl, (contentEl || footerEl), keyboardHeight);\n    if (contentEl && Math.abs(scrollData.scrollAmount) < 4) {\n        // the text input is in a safe position that doesn't\n        // require it to be scrolled into view, just set focus now\n        inputEl.focus();\n        return;\n    }\n    // temporarily move the focus to the focus holder so the browser\n    // doesn't freak out while it's trying to get the input in place\n    // at this point the native text input still does not have focus\n    relocateInput(componentEl, inputEl, true, scrollData.inputSafeY);\n    inputEl.focus();\n    /* tslint:disable-next-line */\n    if (typeof window !== 'undefined') {\n        let scrollContentTimeout;\n        const scrollContent = async () => {\n            // clean up listeners and timeouts\n            if (scrollContentTimeout !== undefined) {\n                clearTimeout(scrollContentTimeout);\n            }\n            window.removeEventListener('ionKeyboardDidShow', scrollContent);\n            // scroll the input into place\n            if (contentEl) {\n                await contentEl.scrollByPoint(0, scrollData.scrollAmount, scrollData.scrollDuration);\n            }\n            // the scroll view is in the correct position now\n            // give the native text input focus\n            relocateInput(componentEl, inputEl, false, scrollData.inputSafeY);\n            // ensure this is the focused input\n            inputEl.focus();\n        };\n        if (contentEl) {\n            const scrollEl = await contentEl.getScrollElement();\n            /**\n             * scrollData will only consider the amount we need\n             * to scroll in order to properly bring the input\n             * into view. It will not consider the amount\n             * we can scroll in the content element.\n             * As a result, scrollData may request a greater\n             * scroll position than is currently available\n             * in the DOM. If this is the case, we need to\n             * wait for the webview to resize/the keyboard\n             * to show in order for additional scroll\n             * bandwidth to become available.\n             */\n            const totalScrollAmount = scrollEl.scrollHeight - scrollEl.clientHeight;\n            if (scrollData.scrollAmount > (totalScrollAmount - scrollEl.scrollTop)) {\n                window.addEventListener('ionKeyboardDidShow', scrollContent);\n                /**\n                 * This should only fire in 2 instances:\n                 * 1. The app is very slow.\n                 * 2. The app is running in a browser on an old OS\n                 * that does not support Ionic Keyboard Events\n                 */\n                scrollContentTimeout = setTimeout(scrollContent, 1000);\n                return;\n            }\n        }\n        scrollContent();\n    }\n};\nconst hasPointerMoved = (threshold, startCoord, endCoord) => {\n    if (startCoord && endCoord) {\n        const deltaX = (startCoord.x - endCoord.x);\n        const deltaY = (startCoord.y - endCoord.y);\n        const distance = deltaX * deltaX + deltaY * deltaY;\n        return distance > (threshold * threshold);\n    }\n    return false;\n};\n\nconst PADDING_TIMER_KEY = '$ionPaddingTimer';\nconst enableScrollPadding = (keyboardHeight) => {\n    const doc = document;\n    const onFocusin = (ev) => {\n        setScrollPadding(ev.target, keyboardHeight);\n    };\n    const onFocusout = (ev) => {\n        setScrollPadding(ev.target, 0);\n    };\n    doc.addEventListener('focusin', onFocusin);\n    doc.addEventListener('focusout', onFocusout);\n    return () => {\n        doc.removeEventListener('focusin', onFocusin);\n        doc.removeEventListener('focusout', onFocusout);\n    };\n};\nconst setScrollPadding = (input, keyboardHeight) => {\n    if (input.tagName !== 'INPUT') {\n        return;\n    }\n    if (input.parentElement && input.parentElement.tagName === 'ION-INPUT') {\n        return;\n    }\n    if (input.parentElement &&\n        input.parentElement.parentElement &&\n        input.parentElement.parentElement.tagName === 'ION-SEARCHBAR') {\n        return;\n    }\n    const el = input.closest('ion-content');\n    if (el === null) {\n        return;\n    }\n    const timer = el[PADDING_TIMER_KEY];\n    if (timer) {\n        clearTimeout(timer);\n    }\n    if (keyboardHeight > 0) {\n        el.style.setProperty('--keyboard-offset', `${keyboardHeight}px`);\n    }\n    else {\n        el[PADDING_TIMER_KEY] = setTimeout(() => {\n            el.style.setProperty('--keyboard-offset', '0px');\n        }, 120);\n    }\n};\n\nconst INPUT_BLURRING = true;\nconst SCROLL_PADDING = true;\nconst startInputShims = (config) => {\n    const doc = document;\n    const keyboardHeight = config.getNumber('keyboardHeight', 290);\n    const scrollAssist = config.getBoolean('scrollAssist', true);\n    const hideCaret = config.getBoolean('hideCaretOnScroll', true);\n    const inputBlurring = config.getBoolean('inputBlurring', true);\n    const scrollPadding = config.getBoolean('scrollPadding', true);\n    const inputs = Array.from(doc.querySelectorAll('ion-input, ion-textarea'));\n    const hideCaretMap = new WeakMap();\n    const scrollAssistMap = new WeakMap();\n    const registerInput = async (componentEl) => {\n        if (componentEl.componentOnReady) {\n            await componentEl.componentOnReady();\n        }\n        const inputRoot = componentEl.shadowRoot || componentEl;\n        const inputEl = inputRoot.querySelector('input') || inputRoot.querySelector('textarea');\n        const scrollEl = componentEl.closest('ion-content');\n        const footerEl = (!scrollEl) ? componentEl.closest('ion-footer') : null;\n        if (!inputEl) {\n            return;\n        }\n        if ( !!scrollEl && hideCaret && !hideCaretMap.has(componentEl)) {\n            const rmFn = enableHideCaretOnScroll(componentEl, inputEl, scrollEl);\n            hideCaretMap.set(componentEl, rmFn);\n        }\n        if ( (!!scrollEl || !!footerEl) && scrollAssist && !scrollAssistMap.has(componentEl)) {\n            const rmFn = enableScrollAssist(componentEl, inputEl, scrollEl, footerEl, keyboardHeight);\n            scrollAssistMap.set(componentEl, rmFn);\n        }\n    };\n    const unregisterInput = (componentEl) => {\n        if ( hideCaret) {\n            const fn = hideCaretMap.get(componentEl);\n            if (fn) {\n                fn();\n            }\n            hideCaretMap.delete(componentEl);\n        }\n        if ( scrollAssist) {\n            const fn = scrollAssistMap.get(componentEl);\n            if (fn) {\n                fn();\n            }\n            scrollAssistMap.delete(componentEl);\n        }\n    };\n    if (inputBlurring && INPUT_BLURRING) {\n        enableInputBlurring();\n    }\n    if (scrollPadding && SCROLL_PADDING) {\n        enableScrollPadding(keyboardHeight);\n    }\n    // Input might be already loaded in the DOM before ion-device-hacks did.\n    // At this point we need to look for all of the inputs not registered yet\n    // and register them.\n    for (const input of inputs) {\n        registerInput(input);\n    }\n    doc.addEventListener('ionInputDidLoad', ((ev) => {\n        registerInput(ev.detail);\n    }));\n    doc.addEventListener('ionInputDidUnload', ((ev) => {\n        unregisterInput(ev.detail);\n    }));\n};\n\nexport { startInputShims };\n"]}