{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/ion-route_4.entry.js"],"names":["Route","hostRef","this","url","ionRouteDataChanged","newValue","emit","oldValue","keys1","Object","keys","keys2","length","key","onUpdate","RouteRedirect","ionRouteRedirectChanged","generatePath","segments","filter","s","join","parsePath","path","split","map","trim","writeNavState","async","root","chain","direction","index","changed","outlet","searchNavNode","componentOnReady","route","setRouteId","id","params","result","element","markVisible","console","error","e","QUERY","matches","querySelector","routeRedirect","routes","find","input","from","i","expected","matchesIDs","ids","len","Math","min","toLowerCase","matchesPath","inputPath","allparams","RouterSegments","matchesDefault","segment","data","next","slice","mergeParams","a","b","assign","computePriority","score","level","pow","f","shift","readRedirects","Array","children","el","tagName","to","readProp","readRoutes","flattenRouterTree","readRouteNodes","node","component","Error","componentProps","prop","hasAttribute","getAttribute","nodes","flattenNode","push","Router","previousPath","busy","state","lastState","useHash","ionRouteWillChange","ionRouteDidChange","debug","document","body","Promise","resolve","window","addEventListener","once","onRoutesChanged","onRedirectChanged","bind","historyDirection","getPath","writeNavStateRoot","ev","detail","register","processNextHandler","back","startsWith","URL","location","href","pathname","queryString","setPath","history","waitPromise","group","forEach","r","groupEnd","redirects","redirect","warn","getRouteId","chains","match","maxMatches","plainIDs","param","safeWriteNavState","win","replaceState","title","redirectFrom","matchedChain","lock","unlock","p","routeEvent","routeChangeEvent","pushState","loc","hash","prefix","redirectFromPath","redirectedFrom","g","RouterLink","routerDirection","onClick","mode","attrs","rel","target","class","color","style"],"mappings":"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","file":"x","sourcesContent":["import { r as registerInstance, d as createEvent, e as getElement, h, H as Host } from './index-e23c3ffd.js';\nimport { b as getIonMode } from './ionic-global-fbc9a2ac.js';\nimport { e as debounce } from './helpers-5c745fbd.js';\nimport { o as openURL, c as createColorClasses } from './theme-c2dc54d9.js';\n\nconst Route = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /**\n         * Relative path that needs to match in order for this route to apply.\n         *\n         * Accepts paths similar to expressjs so that you can define parameters\n         * in the url /foo/:bar where bar would be available in incoming props.\n         */\n        this.url = '';\n        this.ionRouteDataChanged = createEvent(this, \"ionRouteDataChanged\", 7);\n    }\n    onUpdate(newValue) {\n        this.ionRouteDataChanged.emit(newValue);\n    }\n    onComponentProps(newValue, oldValue) {\n        if (newValue === oldValue) {\n            return;\n        }\n        const keys1 = newValue ? Object.keys(newValue) : [];\n        const keys2 = oldValue ? Object.keys(oldValue) : [];\n        if (keys1.length !== keys2.length) {\n            this.onUpdate(newValue);\n            return;\n        }\n        for (const key of keys1) {\n            if (newValue[key] !== oldValue[key]) {\n                this.onUpdate(newValue);\n                return;\n            }\n        }\n    }\n    connectedCallback() {\n        this.ionRouteDataChanged.emit();\n    }\n    static get watchers() { return {\n        \"url\": [\"onUpdate\"],\n        \"component\": [\"onUpdate\"],\n        \"componentProps\": [\"onComponentProps\"]\n    }; }\n};\n\nconst RouteRedirect = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionRouteRedirectChanged = createEvent(this, \"ionRouteRedirectChanged\", 7);\n    }\n    propDidChange() {\n        this.ionRouteRedirectChanged.emit();\n    }\n    connectedCallback() {\n        this.ionRouteRedirectChanged.emit();\n    }\n    static get watchers() { return {\n        \"from\": [\"propDidChange\"],\n        \"to\": [\"propDidChange\"]\n    }; }\n};\n\nconst ROUTER_INTENT_NONE = 'root';\nconst ROUTER_INTENT_FORWARD = 'forward';\nconst ROUTER_INTENT_BACK = 'back';\n\nconst generatePath = (segments) => {\n    const path = segments\n        .filter(s => s.length > 0)\n        .join('/');\n    return '/' + path;\n};\nconst chainToPath = (chain) => {\n    const path = [];\n    for (const route of chain) {\n        for (const segment of route.path) {\n            if (segment[0] === ':') {\n                const param = route.params && route.params[segment.slice(1)];\n                if (!param) {\n                    return null;\n                }\n                path.push(param);\n            }\n            else if (segment !== '') {\n                path.push(segment);\n            }\n        }\n    }\n    return path;\n};\nconst writePath = (history, root, useHash, path, direction, state, queryString) => {\n    let url = generatePath([\n        ...parsePath(root),\n        ...path\n    ]);\n    if (useHash) {\n        url = '#' + url;\n    }\n    if (queryString !== undefined) {\n        url = url + '?' + queryString;\n    }\n    if (direction === ROUTER_INTENT_FORWARD) {\n        history.pushState(state, '', url);\n    }\n    else {\n        history.replaceState(state, '', url);\n    }\n};\nconst removePrefix = (prefix, path) => {\n    if (prefix.length > path.length) {\n        return null;\n    }\n    if (prefix.length <= 1 && prefix[0] === '') {\n        return path;\n    }\n    for (let i = 0; i < prefix.length; i++) {\n        if (prefix[i].length > 0 && prefix[i] !== path[i]) {\n            return null;\n        }\n    }\n    if (path.length === prefix.length) {\n        return [''];\n    }\n    return path.slice(prefix.length);\n};\nconst readPath = (loc, root, useHash) => {\n    let pathname = loc.pathname;\n    if (useHash) {\n        const hash = loc.hash;\n        pathname = (hash[0] === '#')\n            ? hash.slice(1)\n            : '';\n    }\n    const prefix = parsePath(root);\n    const path = parsePath(pathname);\n    return removePrefix(prefix, path);\n};\nconst parsePath = (path) => {\n    if (path == null) {\n        return [''];\n    }\n    const removeQueryString = path.split('?')[0];\n    const segments = removeQueryString.split('/')\n        .map(s => s.trim())\n        .filter(s => s.length > 0);\n    if (segments.length === 0) {\n        return [''];\n    }\n    else {\n        return segments;\n    }\n};\n\nconst printRoutes = (routes) => {\n    console.group(`[ion-core] ROUTES[${routes.length}]`);\n    for (const chain of routes) {\n        const path = [];\n        chain.forEach(r => path.push(...r.path));\n        const ids = chain.map(r => r.id);\n        console.debug(`%c ${generatePath(path)}`, 'font-weight: bold; padding-left: 20px', '=>\\t', `(${ids.join(', ')})`);\n    }\n    console.groupEnd();\n};\nconst printRedirects = (redirects) => {\n    console.group(`[ion-core] REDIRECTS[${redirects.length}]`);\n    for (const redirect of redirects) {\n        if (redirect.to) {\n            console.debug('FROM: ', `$c ${generatePath(redirect.from)}`, 'font-weight: bold', ' TO: ', `$c ${generatePath(redirect.to)}`, 'font-weight: bold');\n        }\n    }\n    console.groupEnd();\n};\n\nconst writeNavState = async (root, chain, direction, index, changed = false) => {\n    try {\n        // find next navigation outlet in the DOM\n        const outlet = searchNavNode(root);\n        // make sure we can continue interacting the DOM, otherwise abort\n        if (index >= chain.length || !outlet) {\n            return changed;\n        }\n        await outlet.componentOnReady();\n        const route = chain[index];\n        const result = await outlet.setRouteId(route.id, route.params, direction);\n        // if the outlet changed the page, reset navigation to neutral (no direction)\n        // this means nested outlets will not animate\n        if (result.changed) {\n            direction = ROUTER_INTENT_NONE;\n            changed = true;\n        }\n        // recursively set nested outlets\n        changed = await writeNavState(result.element, chain, direction, index + 1, changed);\n        // once all nested outlets are visible let's make the parent visible too,\n        // using markVisible prevents flickering\n        if (result.markVisible) {\n            await result.markVisible();\n        }\n        return changed;\n    }\n    catch (e) {\n        console.error(e);\n        return false;\n    }\n};\nconst readNavState = async (root) => {\n    const ids = [];\n    let outlet;\n    let node = root;\n    // tslint:disable-next-line:no-constant-condition\n    while (true) {\n        outlet = searchNavNode(node);\n        if (outlet) {\n            const id = await outlet.getRouteId();\n            if (id) {\n                node = id.element;\n                id.element = undefined;\n                ids.push(id);\n            }\n            else {\n                break;\n            }\n        }\n        else {\n            break;\n        }\n    }\n    return { ids, outlet };\n};\nconst waitUntilNavNode = () => {\n    if (searchNavNode(document.body)) {\n        return Promise.resolve();\n    }\n    return new Promise(resolve => {\n        window.addEventListener('ionNavWillLoad', resolve, { once: true });\n    });\n};\nconst QUERY = ':not([no-router]) ion-nav, :not([no-router]) ion-tabs, :not([no-router]) ion-router-outlet';\nconst searchNavNode = (root) => {\n    if (!root) {\n        return undefined;\n    }\n    if (root.matches(QUERY)) {\n        return root;\n    }\n    const outlet = root.querySelector(QUERY);\n    return outlet ? outlet : undefined;\n};\n\nconst matchesRedirect = (input, route) => {\n    const { from, to } = route;\n    if (to === undefined) {\n        return false;\n    }\n    if (from.length > input.length) {\n        return false;\n    }\n    for (let i = 0; i < from.length; i++) {\n        const expected = from[i];\n        if (expected === '*') {\n            return true;\n        }\n        if (expected !== input[i]) {\n            return false;\n        }\n    }\n    return from.length === input.length;\n};\nconst routeRedirect = (path, routes) => {\n    return routes.find(route => matchesRedirect(path, route));\n};\nconst matchesIDs = (ids, chain) => {\n    const len = Math.min(ids.length, chain.length);\n    let i = 0;\n    for (; i < len; i++) {\n        if (ids[i].toLowerCase() !== chain[i].id) {\n            break;\n        }\n    }\n    return i;\n};\nconst matchesPath = (inputPath, chain) => {\n    const segments = new RouterSegments(inputPath);\n    let matchesDefault = false;\n    let allparams;\n    for (let i = 0; i < chain.length; i++) {\n        const path = chain[i].path;\n        if (path[0] === '') {\n            matchesDefault = true;\n        }\n        else {\n            for (const segment of path) {\n                const data = segments.next();\n                // data param\n                if (segment[0] === ':') {\n                    if (data === '') {\n                        return null;\n                    }\n                    allparams = allparams || [];\n                    const params = allparams[i] || (allparams[i] = {});\n                    params[segment.slice(1)] = data;\n                }\n                else if (data !== segment) {\n                    return null;\n                }\n            }\n            matchesDefault = false;\n        }\n    }\n    const matches = (matchesDefault)\n        ? matchesDefault === (segments.next() === '')\n        : true;\n    if (!matches) {\n        return null;\n    }\n    if (allparams) {\n        return chain.map((route, i) => ({\n            id: route.id,\n            path: route.path,\n            params: mergeParams(route.params, allparams[i])\n        }));\n    }\n    return chain;\n};\nconst mergeParams = (a, b) => {\n    if (!a && b) {\n        return b;\n    }\n    else if (a && !b) {\n        return a;\n    }\n    else if (a && b) {\n        return Object.assign(Object.assign({}, a), b);\n    }\n    return undefined;\n};\nconst routerIDsToChain = (ids, chains) => {\n    let match = null;\n    let maxMatches = 0;\n    const plainIDs = ids.map(i => i.id);\n    for (const chain of chains) {\n        const score = matchesIDs(plainIDs, chain);\n        if (score > maxMatches) {\n            match = chain;\n            maxMatches = score;\n        }\n    }\n    if (match) {\n        return match.map((route, i) => ({\n            id: route.id,\n            path: route.path,\n            params: mergeParams(route.params, ids[i] && ids[i].params)\n        }));\n    }\n    return null;\n};\nconst routerPathToChain = (path, chains) => {\n    let match = null;\n    let matches = 0;\n    for (const chain of chains) {\n        const matchedChain = matchesPath(path, chain);\n        if (matchedChain !== null) {\n            const score = computePriority(matchedChain);\n            if (score > matches) {\n                matches = score;\n                match = matchedChain;\n            }\n        }\n    }\n    return match;\n};\nconst computePriority = (chain) => {\n    let score = 1;\n    let level = 1;\n    for (const route of chain) {\n        for (const path of route.path) {\n            if (path[0] === ':') {\n                score += Math.pow(1, level);\n            }\n            else if (path !== '') {\n                score += Math.pow(2, level);\n            }\n            level++;\n        }\n    }\n    return score;\n};\nclass RouterSegments {\n    constructor(path) {\n        this.path = path.slice();\n    }\n    next() {\n        if (this.path.length > 0) {\n            return this.path.shift();\n        }\n        return '';\n    }\n}\n\nconst readRedirects = (root) => {\n    return Array.from(root.children)\n        .filter(el => el.tagName === 'ION-ROUTE-REDIRECT')\n        .map(el => {\n        const to = readProp(el, 'to');\n        return {\n            from: parsePath(readProp(el, 'from')),\n            to: to == null ? undefined : parsePath(to),\n        };\n    });\n};\nconst readRoutes = (root) => {\n    return flattenRouterTree(readRouteNodes(root));\n};\nconst readRouteNodes = (root, node = root) => {\n    return Array.from(node.children)\n        .filter(el => el.tagName === 'ION-ROUTE' && el.component)\n        .map(el => {\n        const component = readProp(el, 'component');\n        if (component == null) {\n            throw new Error('component missing in ion-route');\n        }\n        return {\n            path: parsePath(readProp(el, 'url')),\n            id: component.toLowerCase(),\n            params: el.componentProps,\n            children: readRouteNodes(root, el)\n        };\n    });\n};\nconst readProp = (el, prop) => {\n    if (prop in el) {\n        return el[prop];\n    }\n    if (el.hasAttribute(prop)) {\n        return el.getAttribute(prop);\n    }\n    return null;\n};\nconst flattenRouterTree = (nodes) => {\n    const routes = [];\n    for (const node of nodes) {\n        flattenNode([], routes, node);\n    }\n    return routes;\n};\nconst flattenNode = (chain, routes, node) => {\n    const s = chain.slice();\n    s.push({\n        id: node.id,\n        path: node.path,\n        params: node.params\n    });\n    if (node.children.length === 0) {\n        routes.push(s);\n        return;\n    }\n    for (const sub of node.children) {\n        flattenNode(s, routes, sub);\n    }\n};\n\nconst Router = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.previousPath = null;\n        this.busy = false;\n        this.state = 0;\n        this.lastState = 0;\n        /**\n         * By default `ion-router` will match the routes at the root path (\"/\").\n         * That can be changed when\n         *\n         */\n        this.root = '/';\n        /**\n         * The router can work in two \"modes\":\n         * - With hash: `/index.html#/path/to/page`\n         * - Without hash: `/path/to/page`\n         *\n         * Using one or another might depend in the requirements of your app and/or where it's deployed.\n         *\n         * Usually \"hash-less\" navigation works better for SEO and it's more user friendly too, but it might\n         * requires additional server-side configuration in order to properly work.\n         *\n         * On the otherside hash-navigation is much easier to deploy, it even works over the file protocol.\n         *\n         * By default, this property is `true`, change to `false` to allow hash-less URLs.\n         */\n        this.useHash = true;\n        this.ionRouteWillChange = createEvent(this, \"ionRouteWillChange\", 7);\n        this.ionRouteDidChange = createEvent(this, \"ionRouteDidChange\", 7);\n    }\n    async componentWillLoad() {\n        console.debug('[ion-router] router will load');\n        await waitUntilNavNode();\n        console.debug('[ion-router] found nav');\n        await this.onRoutesChanged();\n    }\n    componentDidLoad() {\n        window.addEventListener('ionRouteRedirectChanged', debounce(this.onRedirectChanged.bind(this), 10));\n        window.addEventListener('ionRouteDataChanged', debounce(this.onRoutesChanged.bind(this), 100));\n    }\n    onPopState() {\n        const direction = this.historyDirection();\n        const path = this.getPath();\n        console.debug('[ion-router] URL changed -> update nav', path, direction);\n        return this.writeNavStateRoot(path, direction);\n    }\n    onBackButton(ev) {\n        ev.detail.register(0, processNextHandler => {\n            this.back();\n            processNextHandler();\n        });\n    }\n    /**\n     * Navigate to the specified URL.\n     *\n     * @param url The url to navigate to.\n     * @param direction The direction of the animation. Defaults to `\"forward\"`.\n     */\n    push(url, direction = 'forward') {\n        if (url.startsWith('.')) {\n            url = (new URL(url, window.location.href)).pathname;\n        }\n        console.debug('[ion-router] URL pushed -> updating nav', url, direction);\n        const path = parsePath(url);\n        const queryString = url.split('?')[1];\n        this.setPath(path, direction, queryString);\n        return this.writeNavStateRoot(path, direction);\n    }\n    /**\n     * Go back to previous page in the window.history.\n     */\n    back() {\n        window.history.back();\n        return Promise.resolve(this.waitPromise);\n    }\n    /** @internal */\n    async printDebug() {\n        console.debug('CURRENT PATH', this.getPath());\n        console.debug('PREVIOUS PATH', this.previousPath);\n        printRoutes(readRoutes(this.el));\n        printRedirects(readRedirects(this.el));\n    }\n    /** @internal */\n    async navChanged(direction) {\n        if (this.busy) {\n            console.warn('[ion-router] router is busy, navChanged was cancelled');\n            return false;\n        }\n        const { ids, outlet } = await readNavState(window.document.body);\n        const routes = readRoutes(this.el);\n        const chain = routerIDsToChain(ids, routes);\n        if (!chain) {\n            console.warn('[ion-router] no matching URL for ', ids.map(i => i.id));\n            return false;\n        }\n        const path = chainToPath(chain);\n        if (!path) {\n            console.warn('[ion-router] router could not match path because some required param is missing');\n            return false;\n        }\n        console.debug('[ion-router] nav changed -> update URL', ids, path);\n        this.setPath(path, direction);\n        await this.safeWriteNavState(outlet, chain, ROUTER_INTENT_NONE, path, null, ids.length);\n        return true;\n    }\n    onRedirectChanged() {\n        const path = this.getPath();\n        if (path && routeRedirect(path, readRedirects(this.el))) {\n            this.writeNavStateRoot(path, ROUTER_INTENT_NONE);\n        }\n    }\n    onRoutesChanged() {\n        return this.writeNavStateRoot(this.getPath(), ROUTER_INTENT_NONE);\n    }\n    historyDirection() {\n        const win = window;\n        if (win.history.state === null) {\n            this.state++;\n            win.history.replaceState(this.state, win.document.title, win.document.location && win.document.location.href);\n        }\n        const state = win.history.state;\n        const lastState = this.lastState;\n        this.lastState = state;\n        if (state > lastState) {\n            return ROUTER_INTENT_FORWARD;\n        }\n        else if (state < lastState) {\n            return ROUTER_INTENT_BACK;\n        }\n        else {\n            return ROUTER_INTENT_NONE;\n        }\n    }\n    async writeNavStateRoot(path, direction) {\n        if (!path) {\n            console.error('[ion-router] URL is not part of the routing set');\n            return false;\n        }\n        // lookup redirect rule\n        const redirects = readRedirects(this.el);\n        const redirect = routeRedirect(path, redirects);\n        let redirectFrom = null;\n        if (redirect) {\n            this.setPath(redirect.to, direction);\n            redirectFrom = redirect.from;\n            path = redirect.to;\n        }\n        // lookup route chain\n        const routes = readRoutes(this.el);\n        const chain = routerPathToChain(path, routes);\n        if (!chain) {\n            console.error('[ion-router] the path does not match any route');\n            return false;\n        }\n        // write DOM give\n        return this.safeWriteNavState(document.body, chain, direction, path, redirectFrom);\n    }\n    async safeWriteNavState(node, chain, direction, path, redirectFrom, index = 0) {\n        const unlock = await this.lock();\n        let changed = false;\n        try {\n            changed = await this.writeNavState(node, chain, direction, path, redirectFrom, index);\n        }\n        catch (e) {\n            console.error(e);\n        }\n        unlock();\n        return changed;\n    }\n    async lock() {\n        const p = this.waitPromise;\n        let resolve;\n        this.waitPromise = new Promise(r => resolve = r);\n        if (p !== undefined) {\n            await p;\n        }\n        return resolve;\n    }\n    async writeNavState(node, chain, direction, path, redirectFrom, index = 0) {\n        if (this.busy) {\n            console.warn('[ion-router] router is busy, transition was cancelled');\n            return false;\n        }\n        this.busy = true;\n        // generate route event and emit will change\n        const routeEvent = this.routeChangeEvent(path, redirectFrom);\n        if (routeEvent) {\n            this.ionRouteWillChange.emit(routeEvent);\n        }\n        const changed = await writeNavState(node, chain, direction, index);\n        this.busy = false;\n        if (changed) {\n            console.debug('[ion-router] route changed', path);\n        }\n        // emit did change\n        if (routeEvent) {\n            this.ionRouteDidChange.emit(routeEvent);\n        }\n        return changed;\n    }\n    setPath(path, direction, queryString) {\n        this.state++;\n        writePath(window.history, this.root, this.useHash, path, direction, this.state, queryString);\n    }\n    getPath() {\n        return readPath(window.location, this.root, this.useHash);\n    }\n    routeChangeEvent(path, redirectFromPath) {\n        const from = this.previousPath;\n        const to = generatePath(path);\n        this.previousPath = to;\n        if (to === from) {\n            return null;\n        }\n        const redirectedFrom = redirectFromPath ? generatePath(redirectFromPath) : null;\n        return {\n            from,\n            redirectedFrom,\n            to,\n        };\n    }\n    get el() { return getElement(this); }\n};\n\nconst routerLinkCss = \":host{--background:transparent;--color:var(--ion-color-primary, #3880ff);background:var(--background);color:var(--color)}:host(.ion-color){color:var(--ion-color-base)}a{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit}\";\n\nconst RouterLink = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /**\n         * When using a router, it specifies the transition direction when navigating to\n         * another page using `href`.\n         */\n        this.routerDirection = 'forward';\n        this.onClick = (ev) => {\n            openURL(this.href, ev, this.routerDirection);\n        };\n    }\n    render() {\n        const mode = getIonMode(this);\n        const attrs = {\n            href: this.href,\n            rel: this.rel,\n            target: this.target\n        };\n        return (h(Host, { onClick: this.onClick, class: Object.assign(Object.assign({}, createColorClasses(this.color)), { [mode]: true, 'ion-activatable': true }) }, h(\"a\", Object.assign({}, attrs), h(\"slot\", null))));\n    }\n};\nRouterLink.style = routerLinkCss;\n\nexport { Route as ion_route, RouteRedirect as ion_route_redirect, Router as ion_router, RouterLink as ion_router_link };\n"]}