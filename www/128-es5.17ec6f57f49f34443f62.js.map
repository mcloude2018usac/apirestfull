{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/ion-img.entry.js"],"names":["Img","hostRef","this","onLoad","ionImgDidLoad","emit","onError","ionError","ionImgWillLoad","addIO","src","window","removeIO","io","IntersectionObserver","data","isIntersecting","load","observe","el","setTimeout","loadError","loadSrc","disconnect","class","decoding","alt","part","g","style"],"mappings":"meAAA,2EAKMA,EAAGA,WACL,WAAYC,GAAQA,mCAChB,YAAiBC,KAAMD,GACvBC,KAAKC,OAAS,WACVD,EAAKE,cAAcC,QAEvBH,KAAKI,QAAU,WACXJ,EAAKK,SAASF,QAElBH,KAAKM,eAAiB,YAAYN,KAAM,iBAAkB,GAC1DA,KAAKE,cAAgB,YAAYF,KAAM,gBAAiB,GACxDA,KAAKK,SAAW,YAAYL,KAAM,WAAY,GAX7CF,0DAcDE,KAAKO,UAdJT,yCAiBDE,KAAKO,UAjBJT,8BAmBE,gBAAP,IACQE,KAAKQ,MAGL,yBAA0BC,QAC1BT,KAAKU,WACLV,KAAKW,GAAK,IAAIC,sBAAqBC,YAI3BA,EAAK,GAAGC,iBACRd,EAAKe,OACLf,EAAKU,eAGbV,KAAKW,GAAGK,QAAQhB,KAAKiB,KAIrBC,YAAW,kBAAMlB,EAAKe,SAAQ,QAtCjCjB,6BA0CDE,KAAKmB,UAAYnB,KAAKI,QACtBJ,KAAKoB,QAAUpB,KAAKQ,IACpBR,KAAKM,eAAeH,SA5CnBL,iCA+CGE,KAAKW,KACLX,KAAKW,GAAGU,aACRrB,KAAKW,aAjDRb,+BAqDD,OAAQ,YAAE,IAAM,CAAEwB,MAAO,YAAWtB,OAAS,YAAE,MAAO,CAAEuB,SAAU,QAASf,IAAKR,KAAKoB,QAASI,IAAKxB,KAAKwB,IAAKvB,OAAQD,KAAKC,OAAQG,QAASJ,KAAKmB,UAAWM,KAAM,aArDhK3B,yBAuDM,OAAO,SAAA4B,EAAA,CAAW1B,SAvDxBF,gCAwDmB,MAAO,CAC3B,IAAO,CAAC,mBAzDPA,KA4DTA,EAAI6B,MA9DW","file":"x","sourcesContent":["import { r as registerInstance, d as createEvent, h, H as Host, e as getElement } from './index-e23c3ffd.js';\nimport { b as getIonMode } from './ionic-global-fbc9a2ac.js';\n\nconst imgCss = \":host{display:block;-o-object-fit:contain;object-fit:contain}img{display:block;width:100%;height:100%;-o-object-fit:inherit;object-fit:inherit;-o-object-position:inherit;object-position:inherit}\";\n\nconst Img = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.onLoad = () => {\n            this.ionImgDidLoad.emit();\n        };\n        this.onError = () => {\n            this.ionError.emit();\n        };\n        this.ionImgWillLoad = createEvent(this, \"ionImgWillLoad\", 7);\n        this.ionImgDidLoad = createEvent(this, \"ionImgDidLoad\", 7);\n        this.ionError = createEvent(this, \"ionError\", 7);\n    }\n    srcChanged() {\n        this.addIO();\n    }\n    componentDidLoad() {\n        this.addIO();\n    }\n    addIO() {\n        if (this.src === undefined) {\n            return;\n        }\n        if ('IntersectionObserver' in window) {\n            this.removeIO();\n            this.io = new IntersectionObserver(data => {\n                // because there will only ever be one instance\n                // of the element we are observing\n                // we can just use data[0]\n                if (data[0].isIntersecting) {\n                    this.load();\n                    this.removeIO();\n                }\n            });\n            this.io.observe(this.el);\n        }\n        else {\n            // fall back to setTimeout for Safari and IE\n            setTimeout(() => this.load(), 200);\n        }\n    }\n    load() {\n        this.loadError = this.onError;\n        this.loadSrc = this.src;\n        this.ionImgWillLoad.emit();\n    }\n    removeIO() {\n        if (this.io) {\n            this.io.disconnect();\n            this.io = undefined;\n        }\n    }\n    render() {\n        return (h(Host, { class: getIonMode(this) }, h(\"img\", { decoding: \"async\", src: this.loadSrc, alt: this.alt, onLoad: this.onLoad, onError: this.loadError, part: \"image\" })));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"src\": [\"srcChanged\"]\n    }; }\n};\nImg.style = imgCss;\n\nexport { Img as ion_img };\n"]}