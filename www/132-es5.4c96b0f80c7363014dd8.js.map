{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/ion-input-md.entry.js"],"names":["Input","hostRef","this","inputId","inputIds","didBlurAfterEdit","hasFocus","autocapitalize","autocomplete","autocorrect","autofocus","clearInput","debounce","disabled","name","readonly","required","spellcheck","type","value","onInput","ev","input","target","ionInput","emit","onBlur","focusChanged","emitStyle","ionBlur","onFocus","ionFocus","onKeydown","shouldClearOnEdit","hasValue","key","clearTextInput","preventDefault","stopPropagation","nativeInput","ionChange","ionStyle","d","toString","el","hasAttribute","tabindex","getAttribute","removeAttribute","debounceChanged","document","dispatchEvent","CustomEvent","detail","focus","Promise","resolve","clearOnEdit","placeholder","getValue","length","mode","labelId","label","f","id","class","Object","assign","color","ref","accept","autoCapitalize","autoComplete","autoCorrect","autoFocus","enterKeyHint","enterkeyhint","inputMode","inputmode","min","max","minLength","minlength","maxLength","maxlength","multiple","pattern","readOnly","spellCheck","step","size","onKeyDown","onTouchStart","onMouseDown","g","style","ios","md"],"mappings":"w+BAAA,qGASMA,EAAKA,WACP,WAAYC,GAAQA,mCAChB,YAAiBC,KAAMD,GACvBC,KAAKC,QAALD,oBAA4BE,KAC5BF,KAAKG,oBACLH,KAAKI,YAILJ,KAAKK,eAAiB,MAItBL,KAAKM,aAAe,MAIpBN,KAAKO,YAAc,MAInBP,KAAKQ,aAILR,KAAKS,cAILT,KAAKU,SAAW,EAIhBV,KAAKW,YAILX,KAAKY,KAAOZ,KAAKC,QAIjBD,KAAKa,YAILb,KAAKc,YAILd,KAAKe,cAILf,KAAKgB,KAAO,OAIZhB,KAAKiB,MAAQ,GACbjB,KAAKkB,QAAWC,YACZ,IAAMC,EAAQD,EAAGE,OACbD,IACApB,EAAKiB,MAAQG,EAAMH,OAAS,IAEhCjB,EAAKsB,SAASC,KAAKJ,IAEvBnB,KAAKwB,OAAS,WACVxB,EAAKI,YACLJ,EAAKyB,eACLzB,EAAK0B,YACL1B,EAAK2B,QAAQJ,QAEjBvB,KAAK4B,QAAU,WACX5B,EAAKI,YACLJ,EAAKyB,eACLzB,EAAK0B,YACL1B,EAAK6B,SAASN,QAElBvB,KAAK8B,UAAaX,YACVnB,EAAK+B,sBAGD/B,EAAKG,kBAAoBH,EAAKgC,YAAyB,UAAXb,EAAGc,KAE/CjC,EAAKkC,iBAGTlC,EAAKG,sBAGbH,KAAKkC,eAAkBf,YACfnB,EAAKS,aAAeT,EAAKa,WAAab,EAAKW,UAAYQ,IACvDA,EAAGgB,iBACHhB,EAAGiB,mBAEPpC,EAAKiB,MAAQ,GAMTjB,EAAKqC,cACLrC,EAAKqC,YAAYpB,MAAQ,KAGjCjB,KAAKsB,SAAW,YAAYtB,KAAM,WAAY,GAC9CA,KAAKsC,UAAY,YAAYtC,KAAM,YAAa,GAChDA,KAAK2B,QAAU,YAAY3B,KAAM,UAAW,GAC5CA,KAAK6B,SAAW,YAAY7B,KAAM,WAAY,GAC9CA,KAAKuC,SAAW,YAAYvC,KAAM,WAAY,GA5G3CF,qEA+GHE,KAAKsC,UAAY,SAAAE,EAAA,CAAcxC,KAAKsC,UAAWtC,KAAKU,YA/GjDZ,wCAkHHE,KAAK0B,cAlHF5B,qCAwHHE,KAAK0B,YACL1B,KAAKsC,UAAUf,KAAK,CAAEN,MAAqB,MAAdjB,KAAKiB,MAAgBjB,KAAKiB,MAAQjB,KAAKiB,MAAMwB,eAzHvE3C,0CA+HH,GAAIE,KAAK0C,GAAGC,aAAa,YAAa,CAClC,IAAMC,EAAW5C,KAAK0C,GAAGG,aAAa,YACtC7C,KAAK4C,SAAwB,OAAbA,EAAoBA,SACpC5C,KAAK0C,GAAGI,gBAAgB,eAlIzBhD,0CAsIHE,KAAK0B,YACL1B,KAAK+C,kBAEDC,SAASC,cAAc,IAAIC,YAAY,kBAAmB,CACtDC,OAAQnD,KAAK0C,QA1IlB5C,6CAgJCkD,SAASC,cAAc,IAAIC,YAAY,oBAAqB,CACxDC,OAAQnD,KAAK0C,QAjJlB5C,iKA0JCE,KAAKqC,aACLrC,KAAKqC,YAAYe,QA3JlBtD,qIAkKH,OAAOuD,QAAQC,QAAQtD,KAAKqC,eAlKzBvC,0CAoKY,IACPkB,EAAsBhB,KAAxB,KAAQuD,EAAgBvD,KAAlB,YACZ,YAAO,IAACuD,EACO,aAATvC,EACAuC,IAxKHzD,iCA2KH,MAA6B,iBAAfE,KAAKiB,MAAqBjB,KAAKiB,MAAMwB,YAC9CzC,KAAKiB,OAAS,IAAIwB,aA5KpB3C,kCA+KHE,KAAKuC,SAAShB,KAAK,CACf,eACA,SACA,kBAAuC,MAApBvB,KAAKwD,YACxB,YAAaxD,KAAKgC,WAClB,YAAahC,KAAKI,SAClB,uBAAwBJ,KAAKW,aArL9Bb,sCA0LEE,KAAKI,UAAYJ,KAAK+B,qBAAuB/B,KAAKgC,aACnDhC,KAAKG,uBA3LNL,iCA+LH,OAAOE,KAAKyD,WAAWC,OAAS,IA/L7B5D,+BAiMC,aACE6D,EAAO,YAAW3D,MAClBiB,EAAQjB,KAAKyD,WACbG,EAAU5D,KAAKC,QAAU,OACzB4D,EAAQ,SAAAC,EAAA,CAAc9D,KAAK0C,IAIjC,OAHImB,IACAA,EAAME,GAAKH,GAEP,YAAE,IAAM,CAAE,gBAAiB5D,KAAKW,SAAW,OAAS,KAAMqD,MAAOC,OAAOC,OAAOD,OAAOC,OAAO,GAAI,YAAmBlE,KAAKmE,SAAxDF,uBAAoEN,GAAMA,GAA1EM,kBAAiF,YAAajE,KAAKgC,YAAnGiC,kBAA+G,YAAajE,KAAKI,UAAjI6D,KAAgJ,YAAE,QAAS,CAAED,MAAO,eAAgBI,IAAKhD,YAAKA,OAAIpB,EAAKqC,YAAcjB,GAAO,kBAAmBwC,EAASjD,SAAUX,KAAKW,SAAU0D,OAAQrE,KAAKqE,OAAQC,eAAgBtE,KAAKK,eAAgBkE,aAAcvE,KAAKM,aAAckE,YAAaxE,KAAKO,YAAakE,UAAWzE,KAAKQ,UAAWkE,aAAc1E,KAAK2E,aAAcC,UAAW5E,KAAK6E,UAAWC,IAAK9E,KAAK8E,IAAKC,IAAK/E,KAAK+E,IAAKC,UAAWhF,KAAKiF,UAAWC,UAAWlF,KAAKmF,UAAWC,SAAUpF,KAAKoF,SAAUxE,KAAMZ,KAAKY,KAAMyE,QAASrF,KAAKqF,QAAS7B,YAAaxD,KAAKwD,aAAe,GAAI8B,SAAUtF,KAAKa,SAAUC,SAAUd,KAAKc,SAAUyE,WAAYvF,KAAKe,WAAYyE,KAAMxF,KAAKwF,KAAMC,KAAMzF,KAAKyF,KAAM7C,SAAU5C,KAAK4C,SAAU5B,KAAMhB,KAAKgB,KAAMC,MAAOA,EAAOC,QAASlB,KAAKkB,QAASM,OAAQxB,KAAKwB,OAAQI,QAAS5B,KAAK4B,QAAS8D,UAAW1F,KAAK8B,YAAe9B,KAAKS,aAAeT,KAAKa,WAAab,KAAKW,UAAa,YAAE,SAAU,CAAEK,KAAM,SAAUgD,MAAO,mBAAoBpB,SAAU,KAAM+C,aAAc3F,KAAKkC,eAAgB0D,YAAa5F,KAAKkC,oBAzMnqCpC,yBA2MI,OAAO,SAAA+F,EAAA,CAAW7F,SA3MtBF,gCA4MiB,MAAO,CAC3B,SAAY,CAAC,mBACb,SAAY,CAAC,mBACb,MAAS,CAAC,qBA/MPA,KAkNPI,EAAW,EACfJ,EAAMgG,MAAQ,CACWC,IAxNL,yvJAyNIC,GAvNL","file":"x","sourcesContent":["import { r as registerInstance, d as createEvent, h, H as Host, e as getElement } from './index-e23c3ffd.js';\nimport { b as getIonMode } from './ionic-global-fbc9a2ac.js';\nimport { d as debounceEvent, f as findItemLabel } from './helpers-5c745fbd.js';\nimport { c as createColorClasses } from './theme-c2dc54d9.js';\n\nconst inputIosCss = \".sc-ion-input-ios-h{--placeholder-color:initial;--placeholder-font-style:initial;--placeholder-font-weight:initial;--placeholder-opacity:.5;--padding-top:0;--padding-end:0;--padding-bottom:0;--padding-start:0;--background:transparent;--color:initial;display:-ms-flexbox;display:flex;position:relative;-ms-flex:1;flex:1;-ms-flex-align:center;align-items:center;width:100%;padding:0 !important;background:var(--background);color:var(--color);font-family:var(--ion-font-family, inherit);z-index:2}ion-item.sc-ion-input-ios-h:not(.item-label),ion-item:not(.item-label) .sc-ion-input-ios-h{--padding-start:0}.ion-color.sc-ion-input-ios-h{color:var(--ion-color-base)}.native-input.sc-ion-input-ios{border-radius:var(--border-radius);padding-left:var(--padding-start);padding-right:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit;display:inline-block;-ms-flex:1;flex:1;width:100%;max-width:100%;max-height:100%;border:0;outline:none;background:transparent;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-appearance:none;-moz-appearance:none;appearance:none}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.native-input.sc-ion-input-ios{padding-left:unset;padding-right:unset;-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end)}}.native-input.sc-ion-input-ios::-webkit-input-placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-input.sc-ion-input-ios::-moz-placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-input.sc-ion-input-ios:-ms-input-placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-input.sc-ion-input-ios::-ms-input-placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-input.sc-ion-input-ios::placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-input.sc-ion-input-ios:-webkit-autofill{background-color:transparent}.native-input.sc-ion-input-ios:invalid{-webkit-box-shadow:none;box-shadow:none}.native-input.sc-ion-input-ios::-ms-clear{display:none}.native-input[disabled].sc-ion-input-ios{opacity:0.4}.cloned-input.sc-ion-input-ios{left:0;top:0;position:absolute;pointer-events:none}[dir=rtl].sc-ion-input-ios .cloned-input.sc-ion-input-ios,[dir=rtl].sc-ion-input-ios-h .cloned-input.sc-ion-input-ios,[dir=rtl] .sc-ion-input-ios-h .cloned-input.sc-ion-input-ios{left:unset;right:unset;right:0}.input-clear-icon.sc-ion-input-ios{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;background-position:center;border:0;outline:none;background-color:transparent;background-repeat:no-repeat;visibility:hidden;-webkit-appearance:none;-moz-appearance:none;appearance:none}.has-focus.has-value.sc-ion-input-ios-h .input-clear-icon.sc-ion-input-ios{visibility:visible}.has-focus.sc-ion-input-ios-h{pointer-events:none}.has-focus.sc-ion-input-ios-h input.sc-ion-input-ios,.has-focus.sc-ion-input-ios-h a.sc-ion-input-ios,.has-focus.sc-ion-input-ios-h button.sc-ion-input-ios{pointer-events:auto}.sc-ion-input-ios-h{--padding-top:10px;--padding-end:10px;--padding-bottom:10px;--padding-start:0;font-size:inherit}.item-label-stacked.sc-ion-input-ios-h,.item-label-stacked .sc-ion-input-ios-h,.item-label-floating.sc-ion-input-ios-h,.item-label-floating .sc-ion-input-ios-h{--padding-top:8px;--padding-bottom:8px;--padding-start:0px}.input-clear-icon.sc-ion-input-ios{background-image:url(\\\"data:image/svg+xml;charset=utf-8,<svg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20512%20512'><path%20fill='var(--ion-color-step-600,%20%23666666)'%20d='M403.1,108.9c-81.2-81.2-212.9-81.2-294.2,0s-81.2,212.9,0,294.2c81.2,81.2,212.9,81.2,294.2,0S484.3,190.1,403.1,108.9z%20M352,340.2L340.2,352l-84.4-84.2l-84,83.8L160,339.8l84-83.8l-84-83.8l11.8-11.8l84,83.8l84.4-84.2l11.8,11.8L267.6,256L352,340.2z'/></svg>\\\");width:30px;height:30px;background-size:18px}\";\n\nconst inputMdCss = \".sc-ion-input-md-h{--placeholder-color:initial;--placeholder-font-style:initial;--placeholder-font-weight:initial;--placeholder-opacity:.5;--padding-top:0;--padding-end:0;--padding-bottom:0;--padding-start:0;--background:transparent;--color:initial;display:-ms-flexbox;display:flex;position:relative;-ms-flex:1;flex:1;-ms-flex-align:center;align-items:center;width:100%;padding:0 !important;background:var(--background);color:var(--color);font-family:var(--ion-font-family, inherit);z-index:2}ion-item.sc-ion-input-md-h:not(.item-label),ion-item:not(.item-label) .sc-ion-input-md-h{--padding-start:0}.ion-color.sc-ion-input-md-h{color:var(--ion-color-base)}.native-input.sc-ion-input-md{border-radius:var(--border-radius);padding-left:var(--padding-start);padding-right:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit;display:inline-block;-ms-flex:1;flex:1;width:100%;max-width:100%;max-height:100%;border:0;outline:none;background:transparent;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-appearance:none;-moz-appearance:none;appearance:none}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.native-input.sc-ion-input-md{padding-left:unset;padding-right:unset;-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end)}}.native-input.sc-ion-input-md::-webkit-input-placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-input.sc-ion-input-md::-moz-placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-input.sc-ion-input-md:-ms-input-placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-input.sc-ion-input-md::-ms-input-placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-input.sc-ion-input-md::placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-input.sc-ion-input-md:-webkit-autofill{background-color:transparent}.native-input.sc-ion-input-md:invalid{-webkit-box-shadow:none;box-shadow:none}.native-input.sc-ion-input-md::-ms-clear{display:none}.native-input[disabled].sc-ion-input-md{opacity:0.4}.cloned-input.sc-ion-input-md{left:0;top:0;position:absolute;pointer-events:none}[dir=rtl].sc-ion-input-md .cloned-input.sc-ion-input-md,[dir=rtl].sc-ion-input-md-h .cloned-input.sc-ion-input-md,[dir=rtl] .sc-ion-input-md-h .cloned-input.sc-ion-input-md{left:unset;right:unset;right:0}.input-clear-icon.sc-ion-input-md{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;background-position:center;border:0;outline:none;background-color:transparent;background-repeat:no-repeat;visibility:hidden;-webkit-appearance:none;-moz-appearance:none;appearance:none}.has-focus.has-value.sc-ion-input-md-h .input-clear-icon.sc-ion-input-md{visibility:visible}.has-focus.sc-ion-input-md-h{pointer-events:none}.has-focus.sc-ion-input-md-h input.sc-ion-input-md,.has-focus.sc-ion-input-md-h a.sc-ion-input-md,.has-focus.sc-ion-input-md-h button.sc-ion-input-md{pointer-events:auto}.sc-ion-input-md-h{--padding-top:10px;--padding-end:0;--padding-bottom:10px;--padding-start:8px;font-size:inherit}.item-label-stacked.sc-ion-input-md-h,.item-label-stacked .sc-ion-input-md-h,.item-label-floating.sc-ion-input-md-h,.item-label-floating .sc-ion-input-md-h{--padding-top:8px;--padding-bottom:8px;--padding-start:0}.input-clear-icon.sc-ion-input-md{background-image:url(\\\"data:image/svg+xml;charset=utf-8,<svg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20512%20512'><polygon%20fill='var(--ion-color-step-600,%20%23666666)'%20points='405,136.798%20375.202,107%20256,226.202%20136.798,107%20107,136.798%20226.202,256%20107,375.202%20136.798,405%20256,285.798%20375.202,405%20405,375.202%20285.798,256'/></svg>\\\");width:30px;height:30px;background-size:22px}\";\n\nconst Input = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.inputId = `ion-input-${inputIds++}`;\n        this.didBlurAfterEdit = false;\n        this.hasFocus = false;\n        /**\n         * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.\n         */\n        this.autocapitalize = 'off';\n        /**\n         * Indicates whether the value of the control can be automatically completed by the browser.\n         */\n        this.autocomplete = 'off';\n        /**\n         * Whether auto correction should be enabled when the user is entering/editing the text value.\n         */\n        this.autocorrect = 'off';\n        /**\n         * This Boolean attribute lets you specify that a form control should have input focus when the page loads.\n         */\n        this.autofocus = false;\n        /**\n         * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.\n         */\n        this.clearInput = false;\n        /**\n         * Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke.\n         */\n        this.debounce = 0;\n        /**\n         * If `true`, the user cannot interact with the input.\n         */\n        this.disabled = false;\n        /**\n         * The name of the control, which is submitted with the form data.\n         */\n        this.name = this.inputId;\n        /**\n         * If `true`, the user cannot modify the value.\n         */\n        this.readonly = false;\n        /**\n         * If `true`, the user must fill in a value before submitting a form.\n         */\n        this.required = false;\n        /**\n         * If `true`, the element will have its spelling and grammar checked.\n         */\n        this.spellcheck = false;\n        /**\n         * The type of control to display. The default type is text.\n         */\n        this.type = 'text';\n        /**\n         * The value of the input.\n         */\n        this.value = '';\n        this.onInput = (ev) => {\n            const input = ev.target;\n            if (input) {\n                this.value = input.value || '';\n            }\n            this.ionInput.emit(ev);\n        };\n        this.onBlur = () => {\n            this.hasFocus = false;\n            this.focusChanged();\n            this.emitStyle();\n            this.ionBlur.emit();\n        };\n        this.onFocus = () => {\n            this.hasFocus = true;\n            this.focusChanged();\n            this.emitStyle();\n            this.ionFocus.emit();\n        };\n        this.onKeydown = (ev) => {\n            if (this.shouldClearOnEdit()) {\n                // Did the input value change after it was blurred and edited?\n                // Do not clear if user is hitting Enter to submit form\n                if (this.didBlurAfterEdit && this.hasValue() && ev.key !== 'Enter') {\n                    // Clear the input\n                    this.clearTextInput();\n                }\n                // Reset the flag\n                this.didBlurAfterEdit = false;\n            }\n        };\n        this.clearTextInput = (ev) => {\n            if (this.clearInput && !this.readonly && !this.disabled && ev) {\n                ev.preventDefault();\n                ev.stopPropagation();\n            }\n            this.value = '';\n            /**\n             * This is needed for clearOnEdit\n             * Otherwise the value will not be cleared\n             * if user is inside the input\n             */\n            if (this.nativeInput) {\n                this.nativeInput.value = '';\n            }\n        };\n        this.ionInput = createEvent(this, \"ionInput\", 7);\n        this.ionChange = createEvent(this, \"ionChange\", 7);\n        this.ionBlur = createEvent(this, \"ionBlur\", 7);\n        this.ionFocus = createEvent(this, \"ionFocus\", 7);\n        this.ionStyle = createEvent(this, \"ionStyle\", 7);\n    }\n    debounceChanged() {\n        this.ionChange = debounceEvent(this.ionChange, this.debounce);\n    }\n    disabledChanged() {\n        this.emitStyle();\n    }\n    /**\n     * Update the native input element when the value changes\n     */\n    valueChanged() {\n        this.emitStyle();\n        this.ionChange.emit({ value: this.value == null ? this.value : this.value.toString() });\n    }\n    componentWillLoad() {\n        // If the ion-input has a tabindex attribute we get the value\n        // and pass it down to the native input, then remove it from the\n        // ion-input to avoid causing tabbing twice on the same element\n        if (this.el.hasAttribute('tabindex')) {\n            const tabindex = this.el.getAttribute('tabindex');\n            this.tabindex = tabindex !== null ? tabindex : undefined;\n            this.el.removeAttribute('tabindex');\n        }\n    }\n    connectedCallback() {\n        this.emitStyle();\n        this.debounceChanged();\n        {\n            document.dispatchEvent(new CustomEvent('ionInputDidLoad', {\n                detail: this.el\n            }));\n        }\n    }\n    disconnectedCallback() {\n        {\n            document.dispatchEvent(new CustomEvent('ionInputDidUnload', {\n                detail: this.el\n            }));\n        }\n    }\n    /**\n     * Sets focus on the specified `ion-input`. Use this method instead of the global\n     * `input.focus()`.\n     */\n    async setFocus() {\n        if (this.nativeInput) {\n            this.nativeInput.focus();\n        }\n    }\n    /**\n     * Returns the native `<input>` element used under the hood.\n     */\n    getInputElement() {\n        return Promise.resolve(this.nativeInput);\n    }\n    shouldClearOnEdit() {\n        const { type, clearOnEdit } = this;\n        return (clearOnEdit === undefined)\n            ? type === 'password'\n            : clearOnEdit;\n    }\n    getValue() {\n        return typeof this.value === 'number' ? this.value.toString() :\n            (this.value || '').toString();\n    }\n    emitStyle() {\n        this.ionStyle.emit({\n            'interactive': true,\n            'input': true,\n            'has-placeholder': this.placeholder != null,\n            'has-value': this.hasValue(),\n            'has-focus': this.hasFocus,\n            'interactive-disabled': this.disabled,\n        });\n    }\n    focusChanged() {\n        // If clearOnEdit is enabled and the input blurred but has a value, set a flag\n        if (!this.hasFocus && this.shouldClearOnEdit() && this.hasValue()) {\n            this.didBlurAfterEdit = true;\n        }\n    }\n    hasValue() {\n        return this.getValue().length > 0;\n    }\n    render() {\n        const mode = getIonMode(this);\n        const value = this.getValue();\n        const labelId = this.inputId + '-lbl';\n        const label = findItemLabel(this.el);\n        if (label) {\n            label.id = labelId;\n        }\n        return (h(Host, { \"aria-disabled\": this.disabled ? 'true' : null, class: Object.assign(Object.assign({}, createColorClasses(this.color)), { [mode]: true, 'has-value': this.hasValue(), 'has-focus': this.hasFocus }) }, h(\"input\", { class: \"native-input\", ref: input => this.nativeInput = input, \"aria-labelledby\": labelId, disabled: this.disabled, accept: this.accept, autoCapitalize: this.autocapitalize, autoComplete: this.autocomplete, autoCorrect: this.autocorrect, autoFocus: this.autofocus, enterKeyHint: this.enterkeyhint, inputMode: this.inputmode, min: this.min, max: this.max, minLength: this.minlength, maxLength: this.maxlength, multiple: this.multiple, name: this.name, pattern: this.pattern, placeholder: this.placeholder || '', readOnly: this.readonly, required: this.required, spellCheck: this.spellcheck, step: this.step, size: this.size, tabindex: this.tabindex, type: this.type, value: value, onInput: this.onInput, onBlur: this.onBlur, onFocus: this.onFocus, onKeyDown: this.onKeydown }), (this.clearInput && !this.readonly && !this.disabled) && h(\"button\", { type: \"button\", class: \"input-clear-icon\", tabindex: \"-1\", onTouchStart: this.clearTextInput, onMouseDown: this.clearTextInput })));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"debounce\": [\"debounceChanged\"],\n        \"disabled\": [\"disabledChanged\"],\n        \"value\": [\"valueChanged\"]\n    }; }\n};\nlet inputIds = 0;\nInput.style = {\n    /*STENCIL:MODE:ios*/ ios: inputIosCss,\n    /*STENCIL:MODE:md*/ md: inputMdCss\n};\n\nexport { Input as ion_input };\n"]}