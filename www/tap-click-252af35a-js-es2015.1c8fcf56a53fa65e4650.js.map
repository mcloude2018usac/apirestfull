{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/tap-click-252af35a.js"],"names":["startTapClick","config","scrollingEl","activatableEle","activeRipple","activeDefer","lastTouch","MOUSE_WAIT","lastActivated","useRippleEffect","getBoolean","clearDefers","WeakMap","onTouchEnd","ev","pointerUp","cancelActive","clearTimeout","undefined","removeActivated","pointerDown","parentElement","setActivatedElement","getActivatableTarget","el","x","y","has","Error","classList","contains","ACTIVATED","addActivated","deferId","get","delete","delay","isInstant","ADD_ACTIVATED_DEFERS","remove","setTimeout","Date","now","add","rippleEffect","getRippleEffect","addRipple","removeRipple","then","smooth","active","time","CLEAR_STATE_DEFERS","set","doc","document","addEventListener","target","t","composedPath","closest","path","i","length","shadowRoot","ripple","querySelector"],"mappings":"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","file":"x","sourcesContent":["import { n as now, p as pointerCoord } from './helpers-5c745fbd.js';\n\nconst startTapClick = (config) => {\n    let lastTouch = -MOUSE_WAIT * 10;\n    let lastActivated = 0;\n    let scrollingEl;\n    let activatableEle;\n    let activeRipple;\n    let activeDefer;\n    const useRippleEffect = config.getBoolean('animated', true) && config.getBoolean('rippleEffect', true);\n    const clearDefers = new WeakMap();\n    const isScrolling = () => {\n        return scrollingEl !== undefined && scrollingEl.parentElement !== null;\n    };\n    // Touch Events\n    const onTouchStart = (ev) => {\n        lastTouch = now(ev);\n        pointerDown(ev);\n    };\n    const onTouchEnd = (ev) => {\n        lastTouch = now(ev);\n        pointerUp(ev);\n    };\n    const onMouseDown = (ev) => {\n        const t = now(ev) - MOUSE_WAIT;\n        if (lastTouch < t) {\n            pointerDown(ev);\n        }\n    };\n    const onMouseUp = (ev) => {\n        const t = now(ev) - MOUSE_WAIT;\n        if (lastTouch < t) {\n            pointerUp(ev);\n        }\n    };\n    const cancelActive = () => {\n        clearTimeout(activeDefer);\n        activeDefer = undefined;\n        if (activatableEle) {\n            removeActivated(false);\n            activatableEle = undefined;\n        }\n    };\n    const pointerDown = (ev) => {\n        if (activatableEle || isScrolling()) {\n            return;\n        }\n        scrollingEl = undefined;\n        setActivatedElement(getActivatableTarget(ev), ev);\n    };\n    const pointerUp = (ev) => {\n        setActivatedElement(undefined, ev);\n    };\n    const setActivatedElement = (el, ev) => {\n        // do nothing\n        if (el && el === activatableEle) {\n            return;\n        }\n        clearTimeout(activeDefer);\n        activeDefer = undefined;\n        const { x, y } = pointerCoord(ev);\n        // deactivate selected\n        if (activatableEle) {\n            if (clearDefers.has(activatableEle)) {\n                throw new Error('internal error');\n            }\n            if (!activatableEle.classList.contains(ACTIVATED)) {\n                addActivated(activatableEle, x, y);\n            }\n            removeActivated(true);\n        }\n        // activate\n        if (el) {\n            const deferId = clearDefers.get(el);\n            if (deferId) {\n                clearTimeout(deferId);\n                clearDefers.delete(el);\n            }\n            const delay = isInstant(el) ? 0 : ADD_ACTIVATED_DEFERS;\n            el.classList.remove(ACTIVATED);\n            activeDefer = setTimeout(() => {\n                addActivated(el, x, y);\n                activeDefer = undefined;\n            }, delay);\n        }\n        activatableEle = el;\n    };\n    const addActivated = (el, x, y) => {\n        lastActivated = Date.now();\n        el.classList.add(ACTIVATED);\n        const rippleEffect = useRippleEffect && getRippleEffect(el);\n        if (rippleEffect && rippleEffect.addRipple) {\n            removeRipple();\n            activeRipple = rippleEffect.addRipple(x, y);\n        }\n    };\n    const removeRipple = () => {\n        if (activeRipple !== undefined) {\n            activeRipple.then(remove => remove());\n            activeRipple = undefined;\n        }\n    };\n    const removeActivated = (smooth) => {\n        removeRipple();\n        const active = activatableEle;\n        if (!active) {\n            return;\n        }\n        const time = CLEAR_STATE_DEFERS - Date.now() + lastActivated;\n        if (smooth && time > 0 && !isInstant(active)) {\n            const deferId = setTimeout(() => {\n                active.classList.remove(ACTIVATED);\n                clearDefers.delete(active);\n            }, CLEAR_STATE_DEFERS);\n            clearDefers.set(active, deferId);\n        }\n        else {\n            active.classList.remove(ACTIVATED);\n        }\n    };\n    const doc = document;\n    doc.addEventListener('ionScrollStart', ev => {\n        scrollingEl = ev.target;\n        cancelActive();\n    });\n    doc.addEventListener('ionScrollEnd', () => {\n        scrollingEl = undefined;\n    });\n    doc.addEventListener('ionGestureCaptured', cancelActive);\n    doc.addEventListener('touchstart', onTouchStart, true);\n    doc.addEventListener('touchcancel', onTouchEnd, true);\n    doc.addEventListener('touchend', onTouchEnd, true);\n    doc.addEventListener('mousedown', onMouseDown, true);\n    doc.addEventListener('mouseup', onMouseUp, true);\n};\nconst getActivatableTarget = (ev) => {\n    if (ev.composedPath) {\n        const path = ev.composedPath();\n        for (let i = 0; i < path.length - 2; i++) {\n            const el = path[i];\n            if (el.classList && el.classList.contains('ion-activatable')) {\n                return el;\n            }\n        }\n    }\n    else {\n        return ev.target.closest('.ion-activatable');\n    }\n};\nconst isInstant = (el) => {\n    return el.classList.contains('ion-activatable-instant');\n};\nconst getRippleEffect = (el) => {\n    if (el.shadowRoot) {\n        const ripple = el.shadowRoot.querySelector('ion-ripple-effect');\n        if (ripple) {\n            return ripple;\n        }\n    }\n    return el.querySelector('ion-ripple-effect');\n};\nconst ACTIVATED = 'ion-activated';\nconst ADD_ACTIVATED_DEFERS = 200;\nconst CLEAR_STATE_DEFERS = 200;\nconst MOUSE_WAIT = 2500;\n\nexport { startTapClick };\n"]}